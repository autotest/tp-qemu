- usb:
    virt_test_type = qemu
    no Host_RHEL.m5
    no Host_RHEL.m6.u1
    restart_vm = yes
    kill_vm_on_error = yes
    usbs = " usbtest"
    usb_bus = "usbtest.0"

    # usb controllers
    variants:
        - piix3-uhci:
            usb_type_usbtest = piix3-usb-uhci
            usb_controller = uhci
            usb_max_port_usbtest = 2
            drive_format_stg = "usb1"
            no ppc64 ppc64le
        - piix4-uhci:
            usb_type_usbtest = piix4-usb-uhci
            usb_controller = uhci
            usb_max_port_usbtest = 2
            drive_format_stg = "usb1"
            no ppc64 ppc64le
        - ich9-uhci:
            usb_type_usbtest = ich9-usb-uhci6
            usb_controller = uhci
            usb_max_port_usbtest = 2
            drive_format_stg = "usb1"
            no ppc64 ppc64le
            no Host_RHEL.m6
        - ich9-ehci:
            usb_type_usbtest = ich9-usb-ehci1
            usb_controller = ehci
            usb_max_port_usbtest = 6
            drive_format_stg = "usb2"
        - usb-ehci:
            usb_type_usbtest = usb-ehci
            usb_controller = ehci
            usb_max_port_usbtest = 6
            drive_format_stg = "usb2"
        - nec-xhci:
            no RHEL.3
            no RHEL.4
            no RHEL.5
            no Host_RHEL.m6
            usb_type_usbtest = nec-usb-xhci
            usb_controller = xhci
            usb_max_port_usbtest = 4
            drive_format_stg = "usb3"
            Host_RHEL:
                no Win2000, WinXP, Win2003, WinVista, Win7, Win2008

    # usb toplogy
    variants:
        - without_usb_hub:
        - with_usb_hub:
            no usb_nodev
            usb_devices += " hub1"
            usb_type_hub1 = usb-hub
            usb_port_hub1 = "2"
            usb_port_testdev = "2.1"
            variants:
                - one_usb_dev:
                - max_usb_dev:
                    only usb_boot, usb_reboot
                    no usb_hub
                    usb_devices += " d1 d2 d3 d4 d5 d6 d7"
                    usb_port_d1 = "2.2"
                    usb_port_d2 = "2.3"
                    usb_port_d3 = "2.4"
                    usb_port_d4 = "2.5"
                    usb_port_d5 = "2.6"
                    usb_port_d6 = "2.7"
                    usb_port_d7 = "2.8"
                - max_usb_hub_dev:
                    only usb_boot, usb_reboot
                    only usb_hub
                    usb_devices += " hub2 hub3 hub4"
                    usb_port_hub2 = "2.2"
                    usb_port_hub3 = "2.3"
                    usb_port_hub4 = "2.4"

    # usb devices
    variants:
        - @usb_nodev:
            only usb_storage, usb_host, usb_multi_disk
        - usb_kbd:
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = "usb-kbd"
            info_usb_name = "QEMU USB Keyboard"
            vendor_id = "0627"
            product_id = "0001"
            vendor = "Adomax Technology Co., Ltd"
            product = "QEMU USB Keyboard"
        - usb_mouse:
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = "usb-mouse"
            info_usb_name = "QEMU USB Mouse"
            vendor_id = "0627"
            product_id = "0001"
            vendor = "Adomax Technology Co., Ltd"
            product = "QEMU USB Mouse"
        - usb_tablet:
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = "usb-tablet"
            info_usb_name = "QEMU USB Tablet"
            vendor_id = "0627"
            product_id = "0001"
            vendor = "Adomax Technology Co., Ltd"
            product = "QEMU USB Tablet"
        - usb_ccid:
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = "usb-ccid"
            info_usb_name = "QEMU USB CCID"
            vendor_id = "08E6"
            product_id = "4433"
            vendor = "Gemplus"
            product = "QEMU USB CCID"
        - usb_audio:
            no Host_RHEL.m6
            no Host_RHEL.m7
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = usb-audio
            info_usb_name = "QEMU USB Audio"
            vendor_id = "46F4"
            product_id = "0002"
            vendor = ""
            product = "QEMU USB Audio"
        - usb_hub:
            only usb_boot, usb_reboot, usb_hotplug
            usb_type = usb-hub
            info_usb_name = "QEMU USB Hub"
            vendor_id = "(0000|0409)"
            product_id = "(0000|55aa)"
            vendor = ""
            product = "QEMU USB Hub"

    # usb tests
    variants:
        - usb_boot:
            type = usb_basic_check
            usb_devices += " testdev"
            deviceid_str = "%s:%s"
            chk_usb_info_cmd = "lsusb -v"
            Windows:
                deviceid_str = "VID_%s&PID_%s"
                chk_usb_info_cmd = 'wmic path Win32_USBControllerDevice get Dependent | find "USB"'
                vendor = ""
                product = ""
        - usb_reboot:
            type = usb_basic_check
            reboot_method = shell
            usb_devices += " testdev"
            deviceid_str = "%s:%s"
            chk_usb_info_cmd = "lsusb -v"
            Windows:
                deviceid_str = "VID_%s&PID_%s"
                chk_usb_info_cmd = 'wmic path Win32_USBControllerDevice get Dependent | find "USB"'
                vendor = ""
                product = ""
        - usb_hotplug:
            #XXX: usb_hotplug uses some linux-only cmds.
            # And the pattern to verify device is pluged can't
            # work with guests older then RHEL5.
            no RHEL.3
            no RHEL.4
            no RHEL.5
            type = usb_hotplug
            #XXX: Now usb_hotplug doesn't support QMP monitor.
            # Limit it to human monitor only.
            monitor_type = human
            monitors = hmp1
            main_monitor = hmp1
            usb_sleep_time = 10
            Windows:
                usb_match_add = "VID_%s&PID_%s"
                usb_match_del = ""
                usb_clear_guest_log_cmd = ""
                usb_query_syslog_cmd = 'wmic path Win32_USBControllerDevice get Dependent | find "USB"'
                usb_sleep_time = 10
                usb_udev_refresh_cmd = ""
            variants:
                - usb_normal_test:
                - usb_negative_test:
                    only ehci
                    only usb_hub
                    only without_usb_hub
                    # Note: This is a workaround for the multifunction
                    # code in qemu_vm module.
                    usb_type_usbtest = usb-ehci
                    usb_negative_test = "yes"
                    usb_reply_msg = "Warning: speed mismatch trying to attach usb device"
            variants:
                - usb_one_time:
                    usb_repeat_times = 1
                - usb_multi_times:
                    usb_repeat_times = 5000
        - usb_storage:
            type = usb_storage
            images += " stg"
            blk_extra_params_stg = "serial=TARGET_DISK0"
            image_boot_image1 = yes
            image_name_stg = "images/usbdevice"
            image_format_stg = "qcow2"
            image_boot_stg = no
            drive_index_stg = 1
            create_image_stg = yes
            remove_image_stg = yes
            image_size_stg = 10M
            fdisk_string = "10 MB, 10485760 bytes"
            format_timeout = 400
            check_serial_option = yes
            check_removable_option = yes
            check_io_size_option = yes
            # The following parameters will be overridden in guest-os config files.
            create_partition_cmd = ""
            format_cmd = "yes |mkfs $(readlink -f `ls /dev/disk/by-path/* | grep usb`)"
            list_disk_cmd = ""
            set_online_cmd = ""
            mount_cmd =  "mount $(readlink -f `ls /dev/disk/by-path/* | grep usb`) /media"
            umount_cmd = "umount $(readlink -f `ls /dev/disk/by-path/* | grep usb`)"
            testfile_name = "/media/usb_storage-test.txt"
            writefile_cmd = "echo "set -e" > /media/md5chk.sh;"
            writefile_cmd += " out=%s;"
            writefile_cmd += " python -c "print '$out'*10**4" > /tmp/usb_storage.in;"
            writefile_cmd += " for size in 4K 16K 64K 256K; do"
            writefile_cmd += " dd if=/tmp/usb_storage.in of=/media/out.$size bs=$size || exit 1;"
            writefile_cmd += " md5sum /media/out.$size > /media/out.$size.md5;"
            writefile_cmd += " echo "md5sum -c /media/out.$size.md5 >/dev/null 2>&1" >> /media/md5chk.sh;"
            writefile_cmd += " done;"
            writefile_cmd += " echo $out > %s"
            md5chk_cmd = "sh /media/md5chk.sh"
            readfile_cmd = "cat %s"
            chk_usb_info_cmd = "lsusb -v"
            chk_usb_info_keyword = "Mass Storage,SCSI,QEMU USB HARDDRIVE"
            RHEL.3, RHEL.4, RHEL.5:
                check_io_size_option = no
            Windows:
                chk_usb_info_cmd = 'wmic path Win32_USBControllerDevice get Dependent | find "USB"'
                chk_usb_info_keyword = "USBSTOR,VEN_QEMU,PROD_QEMU_HARDDISK"
                check_serial_option = no
                check_removable_option = no
                check_io_size_option = no
                    create_partition_cmd = "echo select disk 1 > cmd &&"
                    create_partition_cmd += " echo create partition primary >> cmd &&"
                    create_partition_cmd += " echo select partition 1 >> cmd &&"
                    create_partition_cmd += " echo assign letter=I >> cmd &&"
                    create_partition_cmd += " echo exit >> cmd &&"
                    create_partition_cmd += " diskpart /s cmd"
                    format_cmd = "format I: /FS:NTFS /V:local /Q /y"
                    list_disk_cmd = "echo list disk >  cmd &&"
                    list_disk_cmd += " echo exit >>  cmd &&"
                    list_disk_cmd += " diskpart /s cmd"
                    set_online_cmd = " echo select disk %s > cmd &&"
                    set_online_cmd += " echo online disk >> cmd &&"
                    set_online_cmd += " echo att disk clear readonly >> cmd &&"
                    set_online_cmd += " echo exit >> cmd &&"
                    set_online_cmd += " diskpart /s cmd"
                    testfile_name = "I:\\format_disk-test.txt"
                    writefile_cmd = "echo %s > %s &&"
                    writefile_cmd += " cd /d I:\ && C:\\tools\md5sum.exe format_disk-test.txt > format_disk-test-md5.txt"
                    md5chk_cmd = "cd /d I:\ && C:\\tools\md5sum.exe -c format_disk-test-md5.txt"
                    readfile_cmd = "type %s"
                    mount_cmd = ""
                    umount_cmd = ""
        - usb_host:
            # must configure which device should be used
            #usb_host_device = "<vendorid>:<productid>"
            type = usb_host
            #XXX: Now usb_host doesn't support QMP monitor.
            # Limit it to human monitor only.
            monitor_type = human
            monitors = hmp1
            main_monitor = hmp1
            variants:
                - usb_normal_test:
                - usb_negative_test:
                    usb_negative_test = "yes"
                    usb_reply_msg = "Property 'usb-host.productid' doesn't take value"
                    Host_RHEL.m6:
                        # Now no output from monitor for negative test on Host_RHEL.m6
                        usb_reply_msg = ""
                    Host_RHEL.m7:
                        usb_reply_msg = "Parameter 'productid' expects an int64 value or range;"
                        usb_reply_msg += "Parameter 'vendorid' expects an int64 value or range;"
                        usb_reply_msg += "productid out of range;"
                        usb_reply_msg += "vendorid out of range;"
                        usb_reply_msg += "Parameter 'productid' expects uint32_t;"
                        usb_reply_msg += "Parameter 'vendorid' expects uint32_t;"
                    usb_host_device_list = "aaa:aaa,aaa:111,21231:11231333,11231333:21231,21231:1123132233,2123133:1123132233111,1123132233111:111"
                - usb_check_isobufs:
                    usb_check_isobufs = "yes"
            variants:
                - usb_one_time:
                    usb_repeat_times = 1
                - usb_multi_times:
                    usb_repeat_times = 5000
        - usb_multi_disk:
            only ehci
            type = multi_disk
            cmd_timeout = 1000
            black_list = "C: D:"
            start_vm = no
            kill_vm = yes
            create_image = yes
            image_boot_image1 = yes
            force_create_image = yes
            force_create_image_image1 = no
            remove_image = yes
            remove_image_image1 = no
            cmd_timeout = 1000
            stg_image_size = 1G
            stg_image_boot = no
            stg_image_format = qcow2
            stg_assign_index = yes
            stg_drive_format = usb2
            usbs = usb1
            # Override global config for the usb1.
            usb_type_usb1 = usb-ehci
            usb_type = usb-ehci
            usb_max_port_usb1 = 6
            usb_max_port = 6
            usb_devices = ""
            show_mount_cmd = mount|gawk '/mnt/{print $1}'
            clean_cmd = "\rm -rf /mnt/*"
            cmd_list = "copy_to_command copy_from_command"
            file_system = "ext3 ext2"
            mount_command = mkdir /mnt/%s && mount /dev/%s /mnt/%s
            umount_command = umount /dev/%s && rmdir /mnt/%s
            list_volume_command = cd /dev && \ls [vhs]d?
            re_str = "[vhs]d[a-z]"
            format_command = echo y | mkfs -t %s /dev/%s
            copy_to_command = \cp -rf /bin/ls /mnt/%s
            copy_from_command = \cp -rf /mnt/%s/ls /tmp/ls
            compare_command = cd /bin && md5sum ls > /tmp/ls.md5 && cd /tmp && md5sum -c ls.md5
            check_result_key_word = OK
            Windows:
                black_list += " E:"
                shell_port = 23
                shell_client = telnet
                post_cmd = del c:\cmd.exe; true
                file_system = "ntfs fat32"
                cmd_list = "copy_to_command copy_from_command"
                list_volume_command = wmic volume get driveletter
                re_str = "([A-Z]:)"
                format_command = format /fs:%s %s /q /y
                copy_to_command = copy C:\WINDOWS\system32\notepad.exe %s /y
                copy_from_command = copy %s\notepad.exe c:\ /y
                compare_command = fc /b c:\windows\system32\notepad.exe c:\notepad.exe
                check_result_key_word = no difference
            variants:
                - one_disk_repeat:
                    stg_image_num = 1
                    n_repeat = 10
                - max_disk:
                    usbs += " usb2 usb3 usb4"
                    stg_image_num = 24
                    Linux:
                        list_volume_command = cd /dev && \ls [vhs]d*
                        re_str = "[vhs]d[a-z]"

