- virtio_fs_set_capability:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_set_capability
    virt_test_type = qemu
    required_qemu = [4.2.0,)
    s390, s390x:
        required_qemu = [5.2.0,)
    kill_vm = yes
    start_vm = no
    Win10.i386:
        mem = 4096
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_dir = virtio_fs_test/
    force_create_fs_source = no
    fs_source_user_config = yes
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    vm_mem_share = yes
    vm_mem_backend = memory-backend-file
    vm_mem_backend_path = /dev/shm
    share_mem = yes
    !s390, s390x:
        mem_devs = mem1
        backend_mem_mem1 = memory-backend-file
        mem-path_mem1 = /dev/shm
        size_mem1 = ${mem}M
        use_mem_mem1 = no
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    io_timeout = 600
    fs_dest = '/mnt/${fs_target}'
    driver_name = viofs
    Windows:
        # install winfsp tool
        i386, i686:
            install_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    variants:
        - with_cache:
            variants:
                - auto:
                    fs_binary_extra_options = " -o cache=auto"
                - always:
                    fs_binary_extra_options = " -o cache=always"
                - none:
                    fs_binary_extra_options = " -o cache=none"
    variants:
        - remove_capability:
            cmd_create_fs_source = 'mkdir -p /tmp/virtio_fs1_test'
            cmd_run_virtiofsd = '/usr/libexec/virtiofsd --socket-path=%s'
            cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=2048 oflag=direct'
            s390, s390x:
                cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=200 oflag=direct'
            cmd_md5 = 'md5sum %s'
            io_timeout = 120
            Windows:
                cmd_dd = 'dd if=/dev/random of=%s bs=1M count=200'
                cmd_md5 = "%s: && md5sum.exe %s"
            cmd_capsh_print = 'capsh --print |grep -i Bounding'
            cmd_capsh_drop = 'capsh --drop=%s --'
            variants:
                - cap_dac_read_search:
                    only virtio_fs_set_capability..with_cache.auto
                    capability = cap_dac_read_search
                - cap_sys_admin:
                    only virtio_fs_set_capability..with_cache.none
                    capability = cap_sys_admin
                    fs_binary_extra_options += ' -o sandbox=chroot -o xattrmap=':map::user.virtiofsd.:''
                    cmd_yum_attr = 'yum install -y attr --nogpgcheck'
                    guest_trusted = trusted.test
                    cmd_set_trusted = 'setfattr -n ${guest_trusted} ${fs_dest}'
                    cmd_get_trusted = 'getfattr -m '' ${fs_dest}'
                    get_trusted_on_host = 'getfattr $s'
                    host_attributes = user.virtiofsd.trusted.test
                    file_capability = 'cap_net_raw=eip'
                    cmd_create_file = 'touch ${fs_dest}/test_file && chmod a+w ${fs_dest}/test_file'
                    cmd_set_capability = 'setcap cap_net_raw+eip ${fs_dest}/test_file'
                    cmd_get_capability = 'getcap ${fs_dest}/test_file'
                    cmd_echo_file = 'echo "hello" > ${fs_dest}/test_file'
                    variants:
                        - with_xattr:
                            fs_binary_extra_options += ' -o xattr'
                        - without_xattr:
