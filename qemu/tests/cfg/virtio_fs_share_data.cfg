- virtio_fs_share_data:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_share_data
    virt_test_type = qemu
    required_qemu = [4.2.0,)
    s390, s390x:
        required_qemu = [5.2.0,)
    kill_vm = yes
    start_vm = yes
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir = virtio_fs_test/
    force_create_fs_source = yes
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    mem = 4096
    mem_devs = mem1
    backend_mem_mem1 = memory-backend-file
    mem-path_mem1 = /dev/shm
    size_mem1 = 4G
    use_mem_mem1 = no
    share_mem = yes
    !s390, s390x:
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    io_timeout = 600
    fs_dest = '/mnt/${fs_target}'
    driver_name = viofs
    fs_binary_extra_options = ''
    Windows:
        # install winfsp tool
        i386, i686:
            install_path = 'C:\Program Files'
        x86_64:
            install_path = 'C:\Program Files (x86)'
        install_cmd = 'msiexec /i WIN_UTILS:\winfsp-1.7.20172.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\\viofs_log.txt
        viofs_sc_create_cmd = 'sc create VirtioFsSvc binpath="%s -d -1 -D ${viofs_log_file}" start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start VirtioFsSvc'
        viofs_sc_query_cmd = 'sc query VirtioFsSvc'
        virtio_win_media_type = iso
        cdroms += " virtio"
    variants:
        - @default:
        - with_reboot:
            only default.default.with_cache.auto.default
            reboot_guest = 'yes'
            cmd_ps_virtiofsd = 'ps -eo pid,args |grep "socket-path=%s" |grep -v grep'
        - with_log_check:
            only Windows
            only default.default.with_cache.auto.default
            viofs_log_file_cmd = 'dir ${viofs_log_file}'
        - with_stdev_check:
            no Windows
            only default.default.with_cache.auto.default
            fs_binary_extra_options += ",announce_submounts"
            start_vm = no
            force_create_fs_source = no
            cmd_get_stdev = stat %%d %s
            fs_source_dir = /tmp/virtio_fs_test
            export_dir = /mnt/virtio_fs_test_nfs
            nfs_mount_src = 127.0.0.1:/mnt/virtio_fs_test_nfs
            nfs_mount_dst_name = nfs_dir
            setup_local_nfs = yes
            nfs_mount_options = rw
            export_options = 'rw,insecure,no_root_squash,async'
    variants:
        - @default:
        - @extra_parameters:
            variants:
                - lock_posix_off:
                    fs_binary_extra_options += ",no_posix_lock"
                - lock_posix_on:
                    fs_binary_extra_options += ",posix_lock"
            variants:
                - flock_on:
                    fs_binary_extra_options += ",flock"
                - flock_off:
                    fs_binary_extra_options += ",no_flock"
            variants:
                - xattr_on:
                    fs_binary_extra_options += ",xattr"
                - xattr_off:
                    fs_binary_extra_options += ",no_xattr"
                - @default:
    variants:
        - with_cache:
            variants:
                - auto:
                    fs_binary_extra_options += ",cache=auto"
                - always:
                    fs_binary_extra_options += ",cache=always"
                - none:
                    fs_binary_extra_options += ",cache=none"
    variants:
        - @default:
            cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=2048 oflag=direct'
            cmd_md5 = 'md5sum %s'
            folder_test = 'yes'
            test_folder = '%s/test_folder'
            cmd_new_folder = "mkdir -p ${test_folder}"
            cmd_copy_file = "cp %s ${test_folder}"
            cmd_rename_folder = "mv ${test_folder} ${test_folder}_tmp"
            cmd_del_folder = "rm -rf ${test_folder}_tmp"
            cmd_check_folder = "ls ${test_folder}_tmp"
            io_timeout = 120
            Windows:
                cmd_dd = 'dd if=/dev/random of=%s bs=1M count=200'
                cmd_md5 = "%s: && md5sum.exe %s"
                test_folder = '%s\test_folder'
                cmd_new_folder = "md ${test_folder}"
                cmd_copy_file = "copy %s ${test_folder}"
                cmd_rename_folder = "%s && rename test_folder test_folder_tmp"
                cmd_del_folder = "rd /q /s ${test_folder}_tmp"
                cmd_check_folder = "dir ${test_folder}_tmp"
            default..with_cache.none:
                io_timeout = 600
            variants:
                - @default:
                - with_nfs:
                    only with_nfs.with_cache..default.default
                    setup_local_nfs = yes
                    start_vm = no
                    force_create_fs_source = no
                    fs_source_dir = /tmp/virtio_fs_test
                    export_dir = /mnt/virtio_fs_test_nfs
                    nfs_mount_src = 127.0.0.1:/mnt/virtio_fs_test_nfs
                    nfs_mount_options = rw
                    export_options = 'rw,insecure,no_root_squash,async'
                - with_multi_fs_sources:
                    no Windows
                    with_multi_fs_sources.with_cache.none:
                        io_timeout = 600
                    filesystems = fs1 fs2 fs3 fs4 fs5
                    fs_source_dir_fs1 = '/tmp/virtio_fs1_test'
                    fs_source_dir_fs2 = '/tmp/virtio_fs2_test'
                    fs_source_dir_fs3 = '/tmp/virtio_fs3_test'
                    fs_source_dir_fs4 = '/tmp/virtio_fs4_test'
                    fs_source_dir_fs5 = '/tmp/virtio_fs5_test'
                    fs_target_fs1 = 'myfs1'
                    fs_target_fs2 = 'myfs2'
                    fs_target_fs3 = 'myfs3'
                    fs_target_fs4 = 'myfs4'
                    fs_target_fs5 = 'myfs5'
                    fs_dest_fs1 = '/mnt/${fs_target_fs1}'
                    fs_dest_fs2 = '/mnt/${fs_target_fs2}'
                    fs_dest_fs3 = '/mnt/${fs_target_fs3}'
                    fs_dest_fs4 = '/mnt/${fs_target_fs4}'
                    fs_dest_fs5 = '/mnt/${fs_target_fs5}'
        - run_stress:
            no run_stress..extra_parameters
            variants:
                - with_fio:
                    smp = 8
                    vcpu_maxcpus = 8
                    io_timeout = 2000
                    fio_options = '--name=stress --filename=%s --ioengine=libaio --rw=write --direct=1 '
                    fio_options += '--bs=4K --size=1G --iodepth=256 --numjobs=128 --runtime=1800'
                    Windows:
                        fio_options = '--name=stress --filename=%s --ioengine=windowsaio --rw=write --direct=1 '
                        fio_options += '--bs=4K --size=1G --iodepth=256 --numjobs=128 --runtime=1800 --thread'
                - with_pjdfstest:
                    no Windows
                    io_timeout = 1800
                    with_pjdfstest..with_cache.none:
                        io_timeout = 7200
                    pjdfstest_pkg = pjdfstest-0.1.tar.bz2
                    cmd_unpack = 'tar -zxvf {0}/${pjdfstest_pkg} -C {0}'
                    cmd_yum_deps = 'yum install -y perl-Test-Harness'
                    cmd_autoreconf = 'autoreconf -ifs %s/pjdfstest/'
                    cmd_configure = '{0}/pjdfstest/configure && '
                    cmd_configure += 'mv config.* {0}/pjdfstest/ && mv Makefile {0}/pjdfstest/ && mv stamp-h1 {0}/pjdfstest/'
                    cmd_make = 'make %s/pjdfstest/pjdfstest'
                    cmd_pjdfstest = 'prove -rv %s/pjdfstest/tests'
                - with_xfstest:
                    no Windows
                    only run_stress..with_cache.auto
                    start_vm = no
                    image_snapshot = yes
                    mem = 32768
                    size_mem1 = 32G
                    # Skip tests in both xfs and nfs due to known issue
                    # generic/003 120: https://gitlab.com/virtio-fs/qemu/-/issues/8
                    # generic/426 467 477: https://gitlab.com/virtio-fs/qemu/-/issues/10
                    # generic/551: Costs a lot of time
                    generic_blacklist = 'generic/003 generic/120 generic/426 generic/467 generic/477 generic/551'
                    io_timeout = 14400
                    take_regular_screendumps = no
                    # Because screendump uses '/dev/shm' by default, it is shared with memory-backend-file.
                    # And this case only supports Linux, and don't need to check screendump. So turn off this feature.
                    filesystems = fs1 fs2
                    fs_source_dir_fs1 = /tmp/virtio_fs1_test
                    fs_source_dir_fs2 = /tmp/virtio_fs2_test
                    fs_target_fs1 = myfs1
                    fs_target_fs2 = myfs2
                    fs_dest_fs1 = '/mnt/${fs_target_fs1}'
                    fs_dest_fs2 = '/mnt/${fs_target_fs2}'
                    cmd_download_xfstest = 'cd /home && rm -rf xfstests-dev && git clone https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git'
                    cmd_yum_install = 'yum install -y git acl attr automake bc dump e2fsprogs fio gawk gcc libtool lvm2 '
                    cmd_yum_install += 'make psmisc quota sed xfsdump xfsprogs libacl-devel libattr-devel libaio-devel '
                    cmd_yum_install += 'libuuid-devel xfsprogs-devel python3 sqlite'
                    cmd_make_xfs = 'cd /home/xfstests-dev/ && make && make install'
                    cmd_setenv = 'export TEST_DEV=${fs_target_fs1} && export TEST_DIR=${fs_dest_fs1} && export SCRATCH_DEV=${fs_target_fs2} && '
                    cmd_setenv += 'export SCRATCH_MNT=${fs_dest_fs2} && export FSTYP=virtiofs && export FSX_AVOID="-E" && '
                    cmd_setenv += 'echo -e 'TEST_DEV=${fs_target_fs1}\nTEST_DIR=${fs_dest_fs1}\nSCRATCH_DEV=${fs_target_fs2}\n'
                    cmd_setenv += 'SCRATCH_MNT=${fs_dest_fs2}\nFSTYP=virtiofs\nFSX_AVOID="-E"' > configs/localhost.config'
                    cmd_setenv += ' && echo "${generic_blacklist}" > blacklist'
                    cmd_xfstest = './check -virtiofs -E blacklist'
                    cmd_useradd = 'useradd fsgqa && useradd 123456-fsgqa && useradd fsgqa2'
                    cmd_get_tmpfs = 'df -h | grep /dev/shm | gawk '{ print $2 }''
                    cmd_set_tmpfs = 'mount -o remount,size=%s /dev/shm'
                    variants:
                        - with_local_source:
                        - with_nfs_source:
                            # generic/035 nfs specific: https://gitlab.com/virtio-fs/qemu/-/issues/12
                            fs_binary_extra_options += " -o no_killpriv_v2"
                            nfs_blacklist = 'generic/035'
                            cmd_setenv_nfs = 'echo  "${nfs_blacklist}" >> blacklist'
                            force_create_fs_source = no
                            export_dir_fs1 = /mnt/virtio_fs1_test_nfs
                            export_dir_fs2 = /mnt/virtio_fs2_test_nfs
                            nfs_mount_src_fs1 = 127.0.0.1:/mnt/virtio_fs1_test_nfs
                            nfs_mount_src_fs2 = 127.0.0.1:/mnt/virtio_fs2_test_nfs
                            setup_local_nfs = yes
                            nfs_mount_options = rw
                            export_options = 'rw,insecure,no_root_squash,async'
