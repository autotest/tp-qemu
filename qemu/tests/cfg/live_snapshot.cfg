- live_snapshot:
    virt_test_type = qemu
    type = live_snapshot
    no raw vmdk qed
    kill_vm = yes
    monitor_type = qmp
    monitors = qmp1
    source_image = image1
    snapshot_file = live_snapshot_img
    snapshot_mode = "absolute-paths"
    pre_command = "sync && echo 3 >/proc/sys/vm/drop_caches"
    post_command = "sync && echo 3 >/proc/sys/vm/drop_caches"
    create_cmd = "dd if=/dev/urandom of=%s bs=1M count=1024"
    file_create = /var/tmp/file
    clean_cmd = rm -f
    variants:
        - @default:
        - with_data_plane:
            only Host_RHEL.m7
            only virtio_blk virtio_scsi
            #Add a redundant iothread for testing purpose
            iothreads = "iothread0 iothread1"
            virtio_blk:
                blk_extra_params_image1 = "iothread=iothread0"
            virtio_scsi:
                no Host_RHEL.m7.u0, Host_RHEL.m7.u1, Host_RHEL.m7.u2
                bus_extra_params_image1 = "iothread=iothread0"
    variants:
        - simple_test:
            type = live_snapshot_simple
            variants:
                - @default:
                - existing_mode:
                    snapshot_mode = "existing"
                    image_cluster_size = 4096
                    after_finished = "reboot verify_alive"
                - node_name:
                    no Host_RHEL.m5, Host_RHEL.m6 
                    node_name = node1
                    snapshot_node_name = node2
        - with_runtime:
            subcommand = runtime
        - with_file_transfer:
            subcommand = file_transfer
            sleep_time = 60
            filesize = 2000
            transfer_timeout = 1200
            tmp_dir = /var/tmp/
        - with_installation:
            subcommand = installation
            need_install = yes
            start_vm = no
            images = "stg"
            image_name_stg = "images/live_snapshot_base"
            image_size_stg = 20G
            boot_drive_stg = yes
            medium = cdrom
            installation = cdrom
            kernel = vmlinuz
            initrd = initrd.img
            force_create_image_stg = yes
            image_aio = threads
            unattended_delivery_method = cdrom
            cdroms += " unattended"
            index_enable = no
        - base:
            type = live_snapshot_base
            backup_image_before_testing = yes
            restore_image_after_testing = yes
            dd_cmd = "dd if=/dev/zero of=%s bs=4K count=1024 oflag=dsync"
            dd_timeout = 600
            copy_file_timeout = 600
        - with_payload:
            type = live_snapshot_stress
            Windows:
                timeout = 600
                autostress = yes
                stress_test = win_heavyload
                config_cmd = 'setx -m path "%PATH%;${install_path};"'
                install_cmd = "start /wait DRIVE:\HeavyLoadSetup.exe /verysilent"
                check_cmd = 'tasklist | findstr /I  "heavyload.exe"'
                stop_cmd = "taskkill /T /F /IM heavyload.exe"
                x86_64:
                    install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
                i386, i686:
                    install_path = "C:\Program Files\JAM Software\HeavyLoad"
            Linux:
                stress_test = linux_stress
                test_timeout = 1800
                check_cmd = 'pgrep stress'
                stop_cmd = "killall -g stress"
            variants:
                - with_stress:
                    backup_image_before_testing = yes
                    restore_image_after_testing = yes
                    before_start = "load_stress"
                    after_finished = "unload_stress reboot verify_alive"
                - with_stop_cont:
                    before_start = "stop"
                    after_finished = "resume reboot verify_alive"
                - with_reboot:
                    type = live_snapshot_runtime
                    reboot_method = "system_reset"
                    when_start = "reboot"
                    after_finished = "verify_alive"
                - data_integrity:
                    type = live_snapshot_integrity
                    #To make the integrity test innocent, use "writethrough" for cache
                    drive_cache = writethrough
                    before_start = "load_stress"
                    after_finished = "unload_stress"
                    backup_image_before_testing = yes
                    restore_image_after_testing = yes
                    Windows:
                        create_command = "D:\coreutils\DummyCMD.exe FILE 1073741824 1"
                        file_names = "C:\live_snapshot_base C:\live_snapshot_sn1"
                        test_exists_cmd = "dir FILE"
                        autostress = no
                        start_cmd = '"${install_path}\heavyload.exe" \CPU 1 \MEMORY 1024'
                        x86_64:
                            sync_cmd = "WIN_UTILS:\Sync\sync64.exe /accepteula"
                        i386, i686:
                            sync_cmd = "WIN_UTILS:\Sync\sync.exe /accepteula"
                    Linux:
                        create_command = "dd if=/dev/urandom of=FILE bs=128k count=100"
                        file_names = "/home/live_snapshot_base /home/live_snapshot_sn1"
                        test_exists_cmd = "test -f FILE"
                        sync_cmd = "sync"
        - transaction:
            type = live_snapshot_transaction
            images += " sn1 sn2"
            image_name_sn1 = "images/sn1"
            image_name_sn2 = "images/sn2"
            check_base_image = yes
            force_create_image = yes
            force_create_image_image1 = no
            after_finished = "reboot verify_alive"
            with_data_plane:
                virtio_blk:
                    blk_extra_params_sn1 = "iothread=iothread0"
                    blk_extra_params_sn2 = "iothread=iothread1"
                virtio_scsi:
                    bus_extra_params_sn1 = "iothread=iothread0"
                    bus_extra_params_sn2 = "iothread=iothread1"
