- block_iothread_test:
    type = block_iothread_test
    data_images="stg1 stg2 stg3"
    test_images="stg1 stg2"
    images += " ${data_images}"
    blk_extra_params_stg1 += ",serial=stg1"
    image_name_stg1 = images/stg1
    image_size_stg1 = 1G
    remove_image_stg1 = yes
    force_create_image_stg1 = yes
    blk_extra_params_stg2 += ",serial=stg2"
    image_name_stg2 = images/stg2
    image_size_stg2 = 1G
    remove_image_stg2 = yes
    force_create_image_stg2 = yes
    drive_format_stg3 = virtio
    blk_extra_params_stg3 += ",serial=stg3"
    image_name_stg3 = images/stg3
    image_size_stg3 = 1G
    remove_image_stg3 = yes
    force_create_image_stg3 = yes
    vcpu = 8
    num_queues_stg2 = 6
    virtio_blk:
        required_qemu = [8.1.0, )
        drive_format_stg1 = virtio
        drive_format_stg2 = virtio
    virtio_scsi:
        required_qemu = [10.0.0, )
        drive_bus_stg1= 1
        drive_bus_stg2= 2
    Linux:
        tmp_dir = /var/tmp/test
        guest_cmd = "mkdir -p ${tmp_dir} && mkfs.xfs -f {0}  &&"
        guest_cmd += " mount -t xfs {0} ${tmp_dir} && dd if=/dev/zero "
        guest_cmd += " of=${tmp_dir}/test.img bs=1M count=100 oflag=direct && "
        guest_cmd += " umount ${tmp_dir}"
    Windows:
        image_size_data = 120M
        guest_cmd = "WIN_UTILS:\dd.exe if=/dev/zero of={}  bs=1M count=100 "
    ovmf:
        no i440fx
    variants:
        - with_cfg:
            iothread_scheme =
            image_iothread =
            iothreads = t1 t2 t3 t4
            guest_operation = hotplug_disks_test
            variants:
                - legacy_cfg:
                    del required_qemu
                    drive_format_stg1 = virtio
                    drive_format_stg2 = scsi-hd
                    drive_bus_stg2 = 1
                    drive_bus_stg1 =
                    image_iothread_stg1 = t1
                    image_iothread_stg2 = t4
                    image_iothread_stg3 = t4
                    check_iothread_images = stg1:1:t1 stg2:1:t4
                    check_iothread_type = iothread
                - vq_cfg:
                    image_iothread_vq_mapping_stg1 = t2 t3
                    image_iothread_vq_mapping_stg2 = t1:0,1,2 t2:3 t4:4,5
                    check_iothread_images = stg1:2:t2,t3 stg2:3:t1,t2,t4
                    check_iothread_type = iothread-vq-mapping
                - vq_rr:
                    iothreads =
                    check_iothread_type = iothread-vq-mapping
                    variants:
                        - with_rounds:
                            iothread_scheme = multipeerroundrobin:9
                            check_iothread_images = stg1:2: stg2:2:
                        - with_no_round:
                            iothread_scheme = multipeerroundrobin:2
                            check_iothread_images = stg1:1: stg2:1:
                - vq_full:
                    iothread_scheme = full:4
                    iothreads =
                    check_iothread_images = stg1:4: stg2:4:
                    check_iothread_type = iothread-vq-mapping
        - with_negative:
            not_preprocess = yes
            expect_to_fail = yes
            iothread_scheme ?=
            image_iothread =
            iothreads = t1 t2 t3 t4
            variants:
                - miss_vq:
                    err_msg="missing .* IOThread assignment in iothread-vq-mapping"
                    image_iothread_vq_mapping_stg2 = t1:0 t2:2,3 t4:4,5
                - over_vq:
                    err_msg="vq index .* for IOThread .* must be less than"
                    image_iothread_vq_mapping_stg2 = t1:0,1,2 t2:3 t4:4,6
                - overlap_vq:
                    err_msg="cannot assign vq .* because it is already assigned"
                    image_iothread_vq_mapping_stg2 = t1:0,1,2 t2:2,3,4,5
                - miss_vqs:
                    err_msg="either all items in iothread-vq-mapping must have vqs or "
                    image_iothread_vq_mapping_stg2 = t1:0,1,2 t2
