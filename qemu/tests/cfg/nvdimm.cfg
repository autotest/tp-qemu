- nvdimm:
    type = nvdimm
    slots_mem = 4
    maxmem_mem = 32G
    vm_mem_limit = 30G
    kill_vm_on_error = yes
    login_timeout = 240
    only x86_64, ppc64le, aarch64
    ppc64le:
        required_qemu = [5, )
        only nvdimm_basic nvdimm_negative nvdimm_nvml nvdimm_redis
        no RHEL.7
        # PowerPC guests need to create the persistent memory device manually so far
        nvdimm_ns_create_cmd = "ndctl create-namespace"
        dimm_extra_params = "label-size=256M"
    aarch64:
        only nvdimm_basic nvdimm_hotplug nvdimm_negative.align_illegal
        no RHEL.7
    no Windows
    no RHEL.6 RHEL.5 RHEL.4 RHEL.3
    no RHEL.7.2 RHEL.7.1 RHEL.7.0
    no Host_RHEL.m5
    no Host_RHEL.m6
    no Host_RHEL.m7.u0, Host_RHEL.m7.u1, Host_RHEL.m7.u2
    machine_type_extra_params = "nvdimm=on"
    backend_mem = memory-backend-file
    nv_backend = /tmp/nvdimm0
    mem-path = ${nv_backend}
    mount_dir = "/mnt"
    pre_command = "dd if=/dev/zero of=${nv_backend} bs=1M count=1024"
    dev_path = /dev/pmem0
    format_command = "mkfs.xfs -f ${dev_path}"
    ! RHEL.7:
        format_command += " -m reflink=0"
    mount_command = "mount -o dax ${dev_path} ${mount_dir}"
    post_command = "rm -rf ${nv_backend}"
    mem_devs = mem1
    size_mem = 1G
    share_mem = yes
    nv_file = "${mount_dir}/nv0"
    depends_pkgs = "ndctl "
    RHEL.9:
        repo_install_cmd = "dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
    RHEL.8:
        repo_install_cmd = "dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
    RHEL.7:
        repo_install_cmd = "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
    variants:
        - nvdimm_basic:
        - nvdimm_emulate:
            # Please update host kernel line first, such as add "memmap=1G!5G":
            # 1G is the size, 5G is the start address of host memory
            start_vm = "no"
            nv_backend = "/dev/pmem0"
            mem-path = ${nv_backend}
            del pre_command
            del post_command
            variants:
                - @pmem_default:
                - pmem_on:
                    pmem_mem = on
        - nvdimm_dax:
            start_vm = "no"
            nvdimm_dax = "yes"
            nv_backend = "/dev/dax0.0"
            mem-path = ${nv_backend}
            del pre_command
            del post_command
            ndctl_install_cmd = "rpm -q ndctl || yum install -y ndctl"
            create_dax_cmd = "ndctl create-namespace -m dax -e namespace0.0 -f -v -a 4096"
            del_dax_cmd = "ndctl create-namespace -m memory -e namespace0.0 -f -v -a 4096"
        - nvdimm_mapsync:
            type = nvdimm_mapsync
            no Host_RHEL.m7
            pmem_mem = on
            nv_backend = nvdimm0
            mount_dir = "/mnt/pmem"
            mem-path = "${mount_dir}/${nv_backend}"
            format_command = "mkfs.xfs -f ${dev_path} -m reflink=0"
            mount_command = "mkdir -p ${mount_dir} && mount -o dax ${dev_path} ${mount_dir}"
            truncate_command = "truncate -s ${size_mem} ${mount_dir}/${nv_backend}"
            check_pattern = "^[0-9a-fA-F]+-[0-9a-fA-F]+.*${nv_backend}(?:.|\n)*?^VmFlags: (.*)\n"
            clean_command = "rm -rf ${mount_dir}/${nv_backend} && umount ${mount_dir} && rm -rf ${mount_dir}"
            start_vm = no
        - nvdimm_mode:
            type = nvdimm_mode
            mem_devs = mem1 mem2
            mem-path_mem1 = /tmp/test1.img
            mem-path_mem2 = /tmp/test2.img
            align_mem1 = 128M
            align_mem2 = 128M
            dimm_extra_params = "label-size=2M"
            pre_command = "dd if=/dev/zero of=${mem-path_mem1} bs=1M count=1024"
            pre_command += "; dd if=/dev/zero of=${mem-path_mem2} bs=1M count=1024"
            post_command = "rm -rf ${mem-path_mem1} ${mem-path_mem2}"
            create_dax_cmd = "ndctl create-namespace -m dax -e namespace%s.0 -f -v -a 4096"
            ndctl_check_cmd = "ndctl list"
            del mount_dir
            del dev_path
            del format_command
            del mount_command
        - nvdimm_hotplug:
            del mem_devs
            target_mems = mem1
        - nvdimm_negative:
            type = nvdimm_negative
            start_vm = no
            size_mem = 8G
            pre_command = "dd if=/dev/zero of=${nv_backend} bs=1M count=8192"
            variants:
                - align_max:
                    align_mem = 4G
                    error_msg = "the alignment \(0x100000000\) (is not supported|exceeds the expected maximum alignment)"
                    ppc64le:
                        align_mem = 2G
                        error_msg = ""
                - align_illegal:
                    align_mem = 1.5G
                    error_msg = "alignment 0x60000000 must be a power of two"
        - nvdimm_readonly:
            readonly_mem_mem1 = on
            required_qemu = [6, )
            variants:
                - unarmed_off:
                    type = nvdimm_negative
                    unarmed_dimm_mem1 = off
                    start_vm = no
                    error_msg = "\'unarmed\' property must be \'on\' since memdev mem-${mem_devs} is read-only"
                - unarmed_on:
                    type = boot
                    unarmed_dimm_mem1 = on
        - nvdimm_nvml:
            depends_pkgs += ndctl-devel daxctl-devel pandoc cmake
            nvml_test = yes
            nvml_dir = /tmp/nvml
            get_nvml = "[ -d ${nvml_dir} ] && rm -rf ${nvml_dir}"
            get_nvml += ";git clone --depth=1 https://github.com/pmem/nvml.git ${nvml_dir}"
            compile_nvml = "cd ${nvml_dir}; make"
            ppc64le:
                compile_nvml = "cd ${nvml_dir}; make EXTRA_CFLAGS='-USDS_ENABLED'"
            config_nvml = "cd ${nvml_dir}; cp src/test/testconfig.sh.example src/test/testconfig.sh"
            config_nvml += ";echo 'PMEM_FS_DIR_FORCE_PMEM=1' >> src/test/testconfig.sh"
            config_nvml += ";echo 'PMEM_FS_DIR=${mount_dir}' >> src/test/testconfig.sh"
            run_test = "cd ${nvml_dir}; make check"
        - nvdimm_redis:
            no ppc64, ppc64le
            type = nvdimm_redis
            depends_pkgs += ndctl-devel daxctl-devel pandoc tcl
            redis_dir = /tmp/redis
            get_redis = "[ -d ${redis_dir} ] && rm -rf ${redis_dir}"
            get_redis += "; git clone --depth=1 https://github.com/pmem/redis.git ${redis_dir}"
            nvml_dir = ${redis_dir}/deps/nvml
            get_nvml = "git clone --depth=1 https://github.com/pmem/nvml.git ${nvml_dir}"
            compile_nvml = "cd ${nvml_dir}; make"
            compile_redis = "cd ${redis_dir}; make USE_NVML=yes STD=-std=gnu99"
            run_test = "cd ${redis_dir}; make test"
