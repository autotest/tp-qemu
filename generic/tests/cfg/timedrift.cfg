- timedrift: install setup image_copy unattended_install.cdrom
    virt_test_type = qemu libvirt
    rtc_drift = "slew"
    rtc_clock = host
    drift_threshold = 10
    drift_threshold_single = 3
    variants:
        - shared_ntp_date:
            variants:
                - with_load:
                    type = timedrift
                    # Pin the VM and host load to CPU #0
                    cpu_mask = 0x1
                    # Set the load and rest durations
                    load_duration = 20
                    rest_duration = 20
                    # Fail if the drift after load is higher than 50%
                    drift_threshold = 50
                    # Fail if the drift after the rest period is higher than 10%
                    drift_threshold_after_rest = 10
                    # For now, make sure this test is executed alone
                    used_cpus = 100
                    variants:
                        - default_load:
                        - full_load:
                            test_duration = 28800
                            interval_gettime = 1800
                            pre_command = touch /tmp/host_load_timedrift; for (( I=0; I<`grep -c 'processor' /proc/cpuinfo`; I++ )); do echo $I;taskset -c $I /bin/bash -c 'while [ -e /tmp/host_load_timedrift ]; do :; done&'; done
                            post_command = rm -f /tmp/host_load_timedrift
                - with_migration:
                    type = timedrift_with_migration
                    migration_iterations = 3
                - with_reboot:
                    type = timedrift_with_reboot
                    reboot_iterations = 1
                - with_stop:
                    type = timedrift_with_stop
                    stop_interations = 1
                    stop_time = 60
            variants:
                - ntp:
                    no JeOS
                - date:

        - monotonicity:
            type = timedrift_monotonicity
            cmd_get_time = "date +%s%N"
            time_linger = 60
            host_path = "/tmp/timedrift-monotonicity-result.txt"
            cmd_timeout = 100
            kill_vm_on_error = yes
            # can use this cmd to load host in timedrift testing
            # pre_command = for(( I=0; I<`cat /proc/cpuinfo | grep processor | wc -l`;I++)) ;do echo $I; taskset -c $I /bin/bash -c 'for ((;;)); do X=1;done &'; done
            variants:
                - @short_linger:
                - long_linger:
                    time_linger = 1800
        - with_cpu_offline:
            no Windows
            type = timedrift_with_cpu_offline
            offline_cpu_cmd = echo 0 > /sys/devices/system/cpu/cpu1/online
            online_cpu_cmd = echo 1 > /sys/devices/system/cpu/cpu1/online
            interval_gettime = 120
            test_duration = 600
            smp = 2
            stop_time = 60
        - with_signal_stop:
            no RHEL.3.9, RHEL.4
            type = timedrift_with_stop
            stop_interations = 1
            stop_with_signal = yes
            stop_time = 60
    variants:
        - clock_host:
            # starting from Win2012 Windows no longer relies on number of injected RTC interrupts for time keeping,
            # and the time drift is seen because "stop" monitor command also stops PM timer,
            # so this is unsupported scenario from Win2012.
            Windows:
                only Win2000, WinXP, Win2003, WinVista, Win7, Win2008
            rtc_clock = host
        - clock_vm:
            rtc_clock = vm
    variants:
        - base_utc:
            only Linux
            rtc_base = utc
        - base_localtime:
            only Windows
            rtc_base = localtime
        - base_date:
            rtc_base = 2006-06-17
    variants:
        - no_pvclock:
            only RHEL.4.9
        - with_pvclock:
            # From rhel5.5 32-bit and newer, rhel6.0 32/64-bit and newer, rhel7
            # use kvm-clock as their default clock source, and for RHEL5, from
            # rhel5.5 x86_64 or newer, the "current_clocksource" file exists,
            # but will always return "jiffies", no matter what. One should
            # search for "KVM" in dmesg | grep time.c
            # Ralated link: http://www.linux-kvm.org/page/KVMClock
            no RHEL.3.9 RHEL.4
