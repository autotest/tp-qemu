- virtio_fs_share_data_multi_backend:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_share_data
    virt_test_type = qemu
    required_qemu = [4.2.0,)
    start_vm = no
    kill_vm = yes
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir = /tmp/virtio_fs_test
    force_create_fs_source = no
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    mem = 4096
    mem_devs = mem1
    backend_mem_mem1 = memory-backend-file
    mem-path_mem1 = /dev/shm
    size_mem1 = 4G
    use_mem_mem1 = no
    share_mem = yes
    s390, s390x:
        required_qemu = [5.2.0,)
        vm_mem_share = yes
        pre_command_noncritical = yes
        pre_command = "echo 3 > /proc/sys/vm/drop_caches"
        setup_hugepages = yes
        kvm_module_parameters = 'hpage=1'
        expected_hugepage_size = 1024
    !s390, s390x:
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    io_timeout = 600
    test_file = 'test_file'
    fs_dest = '/mnt/${fs_target}'
    driver_name = viofs
    fs_binary_extra_options = ''
    Windows:
        # install winfsp tool
        i386, i686:
            install_winfsp_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_winfsp_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    variants:
        - with_nfs_source:
            setup_local_nfs = yes
            nfs_mount_options = rw
            export_options = 'rw,insecure,no_root_squash,async'
            variants:
                - @default:
                    no with_xfstest
                    export_dir = /mnt/virtio_fs_test_nfs
                    nfs_mount_src = 127.0.0.1:/mnt/virtio_fs_test_nfs
                - multi_fs:
                    only with_xfstest
                    export_dir_fs1 = /mnt/virtio_fs1_test_nfs
                    export_dir_fs2 = /mnt/virtio_fs2_test_nfs
                    nfs_mount_src_fs1 = 127.0.0.1:/mnt/virtio_fs1_test_nfs
                    nfs_mount_src_fs2 = 127.0.0.1:/mnt/virtio_fs2_test_nfs
        - with_ext_fs:
            no inode_file_handles with_xfstest
            setup_filesystem_on_host = yes
            dd_of_on_host = '/home/extdisk_virtiofs_test'
            cmd_losetup_query_on_host = 'losetup -f'
            cmd_losetup_on_host = 'losetup -f %s'
            cmd_losetup_d_on_host = 'losetup -d %s'
            cmd_mkfs_on_host = 'mkfs.%s '
            cmd_dd_on_host = 'dd if=/dev/urandom of=%s bs=1M count=5660 oflag=direct'
            variants:
                - with_ext3:
                    fs_on_host = ext3
                - with_ext4:
                    fs_on_host = ext4
    variants:
        - @default:
        - with_stdev_check:
            no Windows
            required_qemu = [6.0.0,)
            only with_cache.auto.default_extra_parameters..with_nfs_source.default
            fs_binary_extra_options += " -o announce_submounts"
            cmd_get_stdev = stat %%d %s
            nfs_mount_dst_name = nfs_dir
    variants:
        - @default_extra_parameters:
        - @extra_parameters:
            variants:
                - lock_posix_on:
                    only Host_RHEL.m8
                    fs_binary_extra_options += " -o posix_lock"
            variants:
                - flock_on:
                    only Host_RHEL.m8
                    fs_binary_extra_options += " -o flock"
            variants:
                - xattr_on:
                    fs_binary_extra_options += " -o xattr"
        - with_writeback:
            # Since in writeback-cache mode writes go to the cache only, A large number of dirty pages will be generated.
            # When the memory is insufficient, the performance will be seriously degraded, so increase the memory to 8G.
            mem = 8192
            size_mem1 = 8G
            fs_binary_extra_options += " -o writeback"
        - sandbox:
            variants:
                - chroot:
                    only inode_file_handles
                    fs_binary_extra_options += " --sandbox=chroot"
    variants:
        - with_cache:
            variants:
                - auto:
                    fs_binary_extra_options += " -o cache=auto"
                - always:
                    fs_binary_extra_options += " -o cache=always"
                - none:
                    fs_binary_extra_options += " -o cache=none"
        - inode_file_handles:
            no extra_parameters with_writeback
            no Host_RHEL.m8
            variants:
                - prefer:
                    fs_binary_extra_options += " --inode-file-handles=prefer"
                - mandatory:
                    fs_binary_extra_options += " --inode-file-handles=mandatory"
    variants:
        - @default:
            cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=2048 oflag=direct'
            s390, s390x:
                cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=200 oflag=direct'
            cmd_md5 = 'md5sum %s'
            io_timeout = 120
            Windows:
                cmd_dd = 'dd if=/dev/random of=%s bs=1M count=200'
                cmd_md5 = "%s: && md5sum.exe %s"
            default..with_cache.none:
                io_timeout = 600
            variants:
                - @default:
                - with_folder:
                    only with_cache..default_extra_parameters.default
                    folder_test = 'yes'
                    test_folder = 'test_folder'
                    cmd_new_folder = "cd %s && mkdir -p ${test_folder}"
                    cmd_copy_file = "cp ${test_file} ${test_folder}"
                    cmd_rename_folder = "mv ${test_folder} ${test_folder}_tmp"
                    cmd_del_folder = "rm -rf ${test_folder}_tmp"
                    cmd_check_folder = "ls -al ${test_folder}_tmp"
                    Windows:
                        cmd_new_folder = "%s && md ${test_folder}"
                        cmd_copy_file = "copy ${test_file} ${test_folder}"
                        cmd_rename_folder = "rename ${test_folder} ${test_folder}_tmp"
                        cmd_del_folder = "rd /q /s ${test_folder}_tmp"
                        cmd_check_folder = "dir ${test_folder}_tmp"
        - run_stress:
            variants:
                - with_xfstest:
                    no extra_parameters with_stdev_check
                    only with_nfs_source.multi_fs
                    no s390 s390x
                    no Windows
                    image_snapshot = yes
                    mem = 32768
                    size_mem1 = 32G
                    # Clearing the private setting of falocate and support xattr
                    Host_RHEL.m9:
                        # no_killpriv_v2 is set to the default one on RHEL9
                        fs_binary_extra_options += " --xattr --modcaps=+sys_admin"
                    Host_RHEL.m8:
                        fs_binary_extra_options += " -o no_killpriv_v2 -o xattr -o modcaps=+sys_admin"
                    # Skip tests in both xfs and nfs due to known issue
                    # generic/003 120: https://gitlab.com/virtio-fs/qemu/-/issues/8
                    # generic/426 467 477: https://gitlab.com/virtio-fs/qemu/-/issues/10
                    # generic/551: Costs a lot of time
                    # generic/035 nfs specific: https://gitlab.com/virtio-fs/qemu/-/issues/12
                    # generic/531 nfs specific,id1938936
                    # generic/070 650: due to nfs+virtiofs limitation, skip them if no '--inode_file_handles' specified, id2018072 and id1908490
                    generic_blacklist = 'generic/003 generic/120 generic/426 generic/467 generic/477 generic/551 generic/035 generic/531'
                    with_cache.auto.default_extra_parameters.default.with_nfs_source.multi_fs:
                        generic_blacklist += ' generic/070 generic/650'
                    io_timeout = 14400
                    take_regular_screendumps = no
                    # Because screendump uses '/dev/shm' by default, it is shared with memory-backend-file.
                    # And this case only supports Linux, and don't need to check screendump. So turn off this feature.
                    force_create_fs_source = no
                    filesystems = fs1 fs2
                    fs_source_dir_fs1 = /tmp/virtio_fs1_test
                    fs_source_dir_fs2 = /tmp/virtio_fs2_test
                    fs_target_fs1 = myfs1
                    fs_target_fs2 = myfs2
                    fs_dest_fs1 = '/mnt/${fs_target_fs1}'
                    fs_dest_fs2 = '/mnt/${fs_target_fs2}'
                    cmd_download_xfstest = 'cd /home && rm -rf xfstests-dev && git clone https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git'
                    cmd_yum_install = 'yum install -y git acl attr automake bc e2fsprogs fio gawk gcc libtool lvm2 '
                    cmd_yum_install += 'make psmisc quota sed xfsdump xfsprogs libacl-devel libattr-devel libaio-devel '
                    cmd_yum_install += 'libuuid-devel xfsprogs-devel python3 sqlite'
                    RHEL.8:
                        cmd_yum_install += ' dump'
                    # Use the '-j' parameters to increase compilation efficiency
                    cmd_make_xfs = 'cd /home/xfstests-dev/ && make -j && make install'
                    cmd_setenv = 'export TEST_DEV=${fs_target_fs1} && export TEST_DIR=${fs_dest_fs1} && export SCRATCH_DEV=${fs_target_fs2} && '
                    cmd_setenv += 'export SCRATCH_MNT=${fs_dest_fs2} && export FSTYP=virtiofs && export FSX_AVOID="-E" && '
                    cmd_setenv += 'echo -e 'TEST_DEV=${fs_target_fs1}\nTEST_DIR=${fs_dest_fs1}\nSCRATCH_DEV=${fs_target_fs2}\n'
                    cmd_setenv += 'SCRATCH_MNT=${fs_dest_fs2}\nFSTYP=virtiofs\nFSX_AVOID="-E"' > configs/localhost.config'
                    cmd_setenv += ' && echo "${generic_blacklist}" > blacklist'
                    cmd_xfstest = './check -virtiofs -E blacklist'
                    cmd_useradd = 'useradd fsgqa && useradd 123456-fsgqa && useradd fsgqa2'
                    cmd_get_tmpfs = 'df -h | grep /dev/shm | gawk '{ print $2 }''
                    cmd_set_tmpfs = 'mount -o remount,size=%s /dev/shm'
