# Storage backends:
#   filesystem
# The following testing scenario is covered:
#   blockdev-mirror when there's not enough space in source node
#     The mirror image is a local image(filesystem)

- blockdev_mirror_src_no_space:
    only Linux
    only filesystem
    start_vm = no
    kill_vm = yes
    qemu_force_use_drive_expression = no
    type = blockdev_mirror_src_no_space
    virt_test_type = qemu
    images += " data1"
    source_images = data1
    target_images = mirror1
    remove_image_data1 = yes
    force_create_image_data1 = yes
    backup_options_data1 = sync speed
    sync = full
    speed = 30720000
    storage_pools = default
    storage_pool = default
    storage_type_default = directory
    parallel_tests = overflow_source

    image_size_data1 = 2G
    image_size_mirror1 = ${image_size_data1}
    image_format_data1 = qcow2
    image_format_mirror1 = qcow2
    image_name_data1 = data1
    image_name_mirror1 = mirror1

    source_path = /tmp/tmp_target_path
    images_base_dir_data1 = ${source_path}
    tmp_image_file = /tmp/tmp_image_file
    pre_command = "mkdir -p ${source_path} && dd if=/dev/urandom of=${tmp_image_file} bs=1M count=100 &&"
    pre_command += " mkfs.ext4 ${tmp_image_file} && mount -o loop ${tmp_image_file} ${source_path}"
    post_command = "umount -f ${source_path} && rm -rf ${tmp_image_file} ${source_path}"
    pre_command_timeout = 30
    post_command_timeout = 30
    write_file_cmd = "dd if=/dev/zero of=%s/file bs=1M count=200 oflag=direct"
    error_msg = "No space left on device"
