- virtio_fs_share_data:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_share_data
    virt_test_type = qemu
    required_qemu = [4.2.0,)
    s390, s390x:
        required_qemu = [5.2.0,)
    kill_vm = yes
    start_vm = yes
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir = virtio_fs_test/
    force_create_fs_source = yes
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    share_mem = yes
    io_timeout = 600
    test_file = 'test_file'
    fs_dest = '/mnt/${fs_target}'
    vm_mem_share = yes
    vm_mem_backend = memory-backend-file
    vm_mem_backend_path = /dev/shm
    driver_name = viofs
    fs_binary_extra_options = ''
    !s390, s390x:
        mem_devs = mem1
        backend_mem_mem1 = memory-backend-file
        mem-path_mem1 = /dev/shm
        size_mem1 = ${mem}M
        use_mem_mem1 = no
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    Windows:
        # install winfsp tool
        i386, i686:
            install_winfsp_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_winfsp_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    variants:
        - @default:
        - with_reboot:
            only default.default.with_cache.auto.default
            reboot_guest = 'yes'
            cmd_ps_virtiofsd = 'ps -eo pid,args |grep "socket-path=%s" |grep -v grep'
        - with_log_check:
            only Windows
            only default.default.with_cache.auto.default
            viofs_log_file_cmd = 'dir ${viofs_log_file}'
        - with_packed_on:
            only Host_RHEL.m9
            only default.default.with_cache.auto.default
            fs_driver_props = {"queue-size": 1024, "packed": "on"}
        - git_init:
            only default.default.with_cache.auto.default
            git_init_cmd = 'git init %s/test'
            Windows:
                autoit_name = "AutoIt3_%PROCESSOR_ARCHITECTURE%.exe"
                install_git_cmd = "WIN_UTILS:\${autoit_name} WIN_UTILS:\install_git.au3"
                check_proc_temp = 'tasklist /fi "IMAGENAME eq %s"'
                git_init_cmd = '"c:\Program Files\Git\bin\git.exe" init %s\test'
                cdrom_cd1= "/home/winutil.iso"
                git_check_cmd = '"c:\Program Files\Git\bin\git.exe" init %TEMP%\test'
        - create_dir_winapi:
            only Windows
            only default.default.with_cache.auto.default
            no Host_RHEL.m8
            fs_binary_extra_options += " --log-level debug"
            winapi_dir_name = test_winapi
            create_dir_winapi_cmd = python2.7 -c "import ctypes; dll=ctypes.windll.kernel32;dll.CreateDirectoryA('%s\\${winapi_dir_name}', 0)"
            check_winapi_dir_cmd = "dir %s\${winapi_dir_name}"
        - viofs_service_stop_start:
            only Windows
            only default.default.with_cache.auto.default
            viofs_sc_stop_cmd = 'sc stop ${viofs_svc_name}'
            stop_start_repeats = 10

    variants:
        - @default:
        - @extra_parameters:
            variants:
                - lock_posix_off:
                    fs_binary_extra_options += " -o no_posix_lock"
                - lock_posix_on:
                    only Host_RHEL.m8
                    fs_binary_extra_options += " -o posix_lock"
            variants:
                - flock_on:
                    only Host_RHEL.m8
                    fs_binary_extra_options += " -o flock"
                - flock_off:
                    fs_binary_extra_options += " -o no_flock"
            variants:
                - xattr_on:
                    fs_binary_extra_options += " -o xattr"
                - xattr_off:
                    fs_binary_extra_options += " -o no_xattr"
        - with_writeback:
            only with_cache.auto with_cache.always
            # Since in writeback-cache mode writes go to the cache only, A large number of dirty pages will be generated.
            # When the memory is insufficient, the performance will be seriously degraded, so increase the memory to 8G.
            mem = 8192
            size_mem1 = 8G
            fs_binary_extra_options += " -o writeback"
        - sandbox:
            variants:
                - chroot:
                    only inode_file_handles
                    fs_binary_extra_options += " --sandbox=chroot"
    variants:
        - with_cache:
            variants:
                - auto:
                    fs_binary_extra_options += " -o cache=auto"
                - always:
                    fs_binary_extra_options += " -o cache=always"
                - none:
                    fs_binary_extra_options += " -o cache=none"
        - socket_group:
            no extra_parameters
            socket_group_test = yes
            socket_group = viofs_g
            fs_binary_extra_options += " --socket-group=viofs_g"
            variants:
                - @default:
                    pre_command = groupadd -f ${socket_group}
                    post_command = groupdel ${socket_group}
                    cmd_get_sock = "ls -l %s"
                - unknown_group:
                    type = virtio_fs_with_unknown_group_name
                    start_vm = no
                    force_create_fs_source = no
                    cmd_create_fs_source = 'mkdir -p /tmp/virtio_fs1_test'
                    cmd_run_virtiofsd = '/usr/libexec/virtiofsd --socket-path=%s'
                    result_pattern = "unable to find group"
        - inode_file_handles:
            no extra_parameters
            no Host_RHEL.m8
            variants:
                - prefer:
                    fs_binary_extra_options += " --inode-file-handles=prefer"
                - mandatory:
                    fs_binary_extra_options += " --inode-file-handles=mandatory"
    variants:
        - @default:
            cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=2048 oflag=direct'
            cmd_md5 = 'md5sum %s'
            folder_test = 'yes'
            test_folder = 'test_folder'
            cmd_new_folder = "cd %s && mkdir -p ${test_folder}"
            cmd_copy_file = "cp ${test_file} ${test_folder}"
            cmd_rename_folder = "mv ${test_folder} ${test_folder}_tmp"
            cmd_del_folder = "rm -rf ${test_folder}_tmp"
            cmd_check_folder = "ls -al ${test_folder}_tmp"
            io_timeout = 120
            s390, s390x:
                cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=200 oflag=direct'
            Windows:
                cmd_dd = 'dd if=/dev/random of=%s bs=1M count=200'
                cmd_md5 = "%s: && md5sum.exe %s"
                cmd_new_folder = "%s && md ${test_folder}"
                cmd_copy_file = "copy ${test_file} ${test_folder}"
                cmd_rename_folder = "rename ${test_folder} ${test_folder}_tmp"
                cmd_del_folder = "rd /q /s ${test_folder}_tmp"
                cmd_check_folder = "dir ${test_folder}_tmp"
            default..with_cache.none:
                io_timeout = 600
            variants:
                - @default:
                - with_multi_fs_sources:
                    only with_cache
                    with_multi_fs_sources.with_cache.none:
                        io_timeout = 600
                    Windows:
                        clone_master = yes
                        master_images_clone = image1
                        remove_image_image1 = yes
                        viofs_svc_name = WinFSP.Launcher
                        i386, i686:
                            cmd_path = 'C:\Program Files'
                            win_type = x86
                        x86_64:
                            cmd_path = 'C:\Program Files (x86)'
                            win_type = x64
                        viofs_sc_create_cmd = '"${cmd_path}\WinFsp\bin\fsreg.bat" virtiofs "${viofs_exe_path}" "-t %1 -m %2"'
                        instance_start_cmd = '"${cmd_path}\WinFsp\bin\launchctl-${win_type}.exe" start virtiofs viofs%s %s %s'
                        instance_stop_cmd = '"${cmd_path}\WinFsp\bin\launchctl-${win_type}.exe" stop virtiofs viofs%s'
                        volume_label_fs1 = V:
                        volume_label_fs2 = W:
                        volume_label_fs3 = X:
                        volume_label_fs4 = Y:
                        volume_label_fs5 = Z:
                    filesystems = fs1 fs2 fs3 fs4 fs5
                    fs_source_dir_fs1 = '/tmp/virtio_fs1_test'
                    fs_source_dir_fs2 = '/tmp/virtio_fs2_test'
                    fs_source_dir_fs3 = '/tmp/virtio_fs3_test'
                    fs_source_dir_fs4 = '/tmp/virtio_fs4_test'
                    fs_source_dir_fs5 = '/tmp/virtio_fs5_test'
                    fs_target_fs1 = 'myfs1'
                    fs_target_fs2 = 'myfs2'
                    fs_target_fs3 = 'myfs3'
                    fs_target_fs4 = 'myfs4'
                    fs_target_fs5 = 'myfs5'
                    fs_dest_fs1 = '/mnt/${fs_target_fs1}'
                    fs_dest_fs2 = '/mnt/${fs_target_fs2}'
                    fs_dest_fs3 = '/mnt/${fs_target_fs3}'
                    fs_dest_fs4 = '/mnt/${fs_target_fs4}'
                    fs_dest_fs5 = '/mnt/${fs_target_fs5}'
                - with_symbolic_link:
                    only with_cache..default.default
                    folder_test = 'no'
                    file_link = ${test_file}_link
                    folder_link = ${test_folder}_link
                    cmd_create_file = "echo testing > ${test_file}"
                    cmd_symblic_file = 'ln -s ${test_file} ${file_link}'
                    cmd_symblic_folder = 'ln -s ${test_folder} ${folder_link}'
                    Windows:
                        cmd_symblic_file = 'mklink ${file_link} ${test_file}'
                        cmd_symblic_folder = 'mklink /d ${folder_link} ${test_folder}'
                - case_insensitive:
                    only Windows
                    only with_cache..default.default
                    folder_test = 'no'
                    case_insensitive_test = 'yes'
                    viofs_case_insense_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v CaseInsensitive /d 1 /t REG_DWORD'
        - run_stress:
            no extra_parameters socket_group
            stress_bs = 4K 16K 64K
            variants:
                - with_fio:
                    smp = 8
                    vcpu_maxcpus = 8
                    io_timeout = 2000
                    with_fio..with_cache.none:
                        io_timeout = 7200
                    fio_options = '--name=stress --filename=%s --ioengine=libaio --rw=write --direct=1 '
                    fio_options += '--bs=%s --size=1G --iodepth=256 --numjobs=128 --runtime=1800'
                    Windows:
                        fio_options = '--name=stress --filename=%s --ioengine=windowsaio --rw=write --direct=1 '
                        fio_options += '--bs=%s --size=1G --iodepth=256 --numjobs=128 --runtime=1800 --thread'
                - with_iozone:
                    smp = 8
                    vcpu_maxcpus = 8
                    io_timeout = 1800
                    iozone_options = " -azR -r %s -n 1G -g 4G -I -i 0 -i 1 -f %s"
                    Windows:
                        iozone_path = "WIN_UTILS:\Iozone\iozone.exe"
                        iozone_options = " -azR -r %s -n 1G -g 4G -M -I -i 0 -i 1 -b iozone.xls -f %s"
                - with_pjdfstest:
                    no s390 s390x ppc64 ppc64le
                    no Windows
                    io_timeout = 1800
                    with_pjdfstest..with_cache.none:
                        io_timeout = 7200
                    pjdfstest_pkg = pjdfstest-0.1.tar.bz2
                    pjdfstest_blacklist  = "pjdfstest/tests/rename/21.t"
                    pjdfstest_blacklist += " pjdfstest/tests/symlink/03.t"
                    RHEL.8:
                        pjdfstest_blacklist += " pjdfstest/tests/utimensat/09.t"
                    cmd_unpack = 'tar -zxvf {0}/${pjdfstest_pkg} -C {0}'
                    cmd_yum_deps = 'yum install -y perl-Test-Harness'
                    cmd_autoreconf = 'autoreconf -ifs %s/pjdfstest/'
                    cmd_configure = '{0}/pjdfstest/configure && '
                    cmd_configure += 'mv config.* {0}/pjdfstest/ && mv Makefile {0}/pjdfstest/ && mv stamp-h1 {0}/pjdfstest/'
                    cmd_make = 'make %s/pjdfstest/pjdfstest'
                    cmd_pjdfstest = 'prove -rv %s/pjdfstest/tests'
                - with_xfstest:
                    no s390 s390x
                    no Windows
                    start_vm = no
                    image_snapshot = yes
                    mem = 32768
                    size_mem1 = 32G
                    # Skip tests in both xfs and nfs due to known issue
                    # generic/003 120: https://gitlab.com/virtio-fs/qemu/-/issues/8
                    # generic/426 467 477: https://gitlab.com/virtio-fs/qemu/-/issues/10
                    # generic/551: Costs a lot of time
                    # generic/451: due to generic/451 writes a file directly, add it into blacklist in cache=always scenario
                    # generic/263: filesystem does not support fallocate mode
                    generic_blacklist = 'generic/003\ngeneric/120\ngeneric/426\ngeneric/467\ngeneric/477\ngeneric/551\ngeneric/263\n'
                    with_xfstest..with_cache.always:
                        generic_blacklist += 'generic/451\n'
                    # These tests not support mmap with cache=none
                    with_xfstest..with_cache.none:
                        generic_blacklist += 'generic/029\ngeneric/030\ngeneric/074\ngeneric/080\ngeneric/127\ngeneric/141\n'
                        generic_blacklist += 'generic/198\ngeneric/215\ngeneric/240\ngeneric/246\ngeneric/247\ngeneric/248\n'
                        generic_blacklist += 'generic/340\ngeneric/344\ngeneric/345\ngeneric/346\ngeneric/354\ngeneric/428\n'
                        generic_blacklist += 'generic/437\ngeneric/438\ngeneric/446\ngeneric/469\ngeneric/567\ngeneric/638\n'
                        generic_blacklist += 'generic/647\ngeneric/729\n'
                    ppc64, ppc64le:
                        generic_blacklist += 'generic/075\ngeneric/091\ngeneric/099\ngeneric/237\ngeneric/263\n'
                        generic_blacklist += 'generic/319\ngeneric/375\ngeneric/444\ngeneric/683\ngeneric/684\n'
                        generic_blacklist += 'generic/685\ngeneric/539\ngeneric/112\ngeneric/193\ngeneric/355\n'
                    io_timeout = 14400
                    take_regular_screendumps = no
                    # Because screendump uses '/dev/shm' by default, it is shared with memory-backend-file.
                    # And this case only supports Linux, and don't need to check screendump. So turn off this feature.
                    filesystems = fs1 fs2
                    fs_source_dir_fs1 = /tmp/virtio_fs1_test
                    fs_source_dir_fs2 = /tmp/virtio_fs2_test
                    fs_target_fs1 = myfs1
                    fs_target_fs2 = myfs2
                    fs_dest_fs1 = '/mnt/${fs_target_fs1}'
                    fs_dest_fs2 = '/mnt/${fs_target_fs2}'
                    cmd_download_xfstest = 'cd /home && rm -rf xfstests-dev && git clone https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git'
                    cmd_yum_install = 'yum install -y git acl attr automake bc e2fsprogs fio gawk gcc libtool lvm2 '
                    cmd_yum_install += 'make psmisc quota sed xfsdump xfsprogs libacl-devel libattr-devel libaio-devel '
                    cmd_yum_install += 'libuuid-devel xfsprogs-devel python3 sqlite'
                    RHEL.8:
                        cmd_yum_install += ' dump'
                    # Use the '-j' parameters to increase compilation efficiency
                    cmd_make_xfs = 'cd /home/xfstests-dev/ &&  make -j && make install'
                    cmd_setenv = 'export TEST_DEV=${fs_target_fs1} && export TEST_DIR=${fs_dest_fs1} && export SCRATCH_DEV=${fs_target_fs2} && '
                    cmd_setenv += 'export SCRATCH_MNT=${fs_dest_fs2} && export FSTYP=virtiofs && export FSX_AVOID="-E" && '
                    cmd_setenv += 'echo -e 'TEST_DEV=${fs_target_fs1}\nTEST_DIR=${fs_dest_fs1}\nSCRATCH_DEV=${fs_target_fs2}\n'
                    cmd_setenv += 'SCRATCH_MNT=${fs_dest_fs2}\nFSTYP=virtiofs\nFSX_AVOID="-E"' > configs/localhost.config'
                    cmd_setenv += ' && echo -e "${generic_blacklist}" > blacklist'
                    cmd_xfstest = './check -virtiofs -E blacklist'
                    cmd_useradd = 'useradd fsgqa && useradd 123456-fsgqa && useradd fsgqa2'
                    cmd_get_tmpfs = 'df -h | grep /dev/shm | gawk '{ print $2 }''
                    cmd_set_tmpfs = 'mount -o remount,size=%s /dev/shm'
                    variants:
                        - @default:
                            # Clearing the private setting of falocate and support xattr
                            Host_RHEL.m9:
                                # no_killpriv_v2 is set to the default one on RHEL9
                                fs_binary_extra_options += " --xattr --modcaps=+sys_admin"
                            Host_RHEL.m8:
                                fs_binary_extra_options += " -o no_killpriv_v2 -o xattr -o modcaps=+sys_admin"
                        - posix_acl:
                            only with_cache.auto.default
                            # rhel8 kernel does not support FUSE_POSIX_ACL
                            no RHEL.8
                            Host_RHEL.m9:
                                fs_binary_extra_options += " --xattr --posix-acl"
                            Host_RHEL.m8:
                                fs_binary_extra_options += " -o xattr -o posix_acl"
                            cmd_xfstest = './check -virtiofs -g acl'
