# Notes:
#    Before start testing, please ensure your host OS support hugepage,
#    and ensure you host memory more than 6GB.
#    And memory hotplug need guest OS support, so please ensure your
#    guest OS really supported it.
- hotplug_memory:
    type = hotplug_mem
    mem_fixed = 4096
    slots_mem = 4
    size_mem = 1G
    maxmem_mem = 32G
    mem_devs = mem1
    login_timeout = 600
    pre_command = "sync && echo 3 > /proc/sys/vm/drop_caches"
    no Host_RHEL.6
    no RHEL.5
    no Windows..i386
    no WinXP Win2000 Win2003 WinVista
    threshold = 0.11
    # Notes:
    #    The threshold on ppc was confirmed with developer
    #    since crashkernel size is much bigger than x86
    aarch64,ppc64,ppc64le:
        threshold = 0.15
    sub_test_wait_time = 0
    variants:
        - @default:
        - op_on:
            dump_mem = yes
            merge_mem = yes
            prealloc_mem = yes
            share_mem = yes
            discard-data = yes
            only two
            only no_policy
            only pluged_memory hotplug
        - op_off:
            dump_mem = no
            merge_mem = no
            prealloc_mem = no
            share_mem = no
            discard-data = no
            only two
            only no_policy
            only pluged_memory hotplug
    variants numa_nodes:
        - one:
            guest_numa_nodes = "node0"
            mem_devs += " memN0"
            use_mem_memN0 = "no"
            size_mem_memN0 = 4096M
            backend_mem_memN0 = memory-backend-ram
            numa_memdev_node0 = mem-memN0
            del numa_mem
            del numa_cpus
            del numa_nodeid
            only after
            only guest_reboot
        - two:
            guest_numa_nodes = "node0 node1"
            del numa_mem
            del numa_cpus
            numa_nodeid = 0
            mem_devs += " mem2 memN0 memN1"
            numa_memdev_node0 = mem-memN0
            numa_memdev_node1 = mem-memN1
            use_mem_memN0 = "no"
            use_mem_memN1 = "no"
            size_mem_memN0 = 2048M
            size_mem_memN1 = 2048M
            backend_mem_memN0 = memory-backend-ram
            backend_mem_memN1 = memory-backend-ram
            node_dimm_mem2 = 0
            node_dimm_mem1 = 1
            numa_nodeid_node0 = 0
            numa_nodeid_node1 = 1
            node_dimm_plug1 = 0
            node_dimm_plug2 = 1
            # Due to known issue
            RHEL.9.0.0:
                aarch64:
                    smp = 4
                    numa_cpus_node0 = "0,1"
                    numa_cpus_node1 = "2,3"
    variants:
        - policy_default:
            policy_mem = default
        - policy_bind:
            policy_mem = bind
            host-nodes = 0
            target_nodes = 0
        - policy_interleave:
            policy_mem = interleave
            host-nodes = 0
            target_nodes = 0
            only guest_reboot
            only after
        - policy_preferred:
            policy_mem = preferred
            host-nodes = 0
            target_nodes = 0
            only guest_reboot
            only after
        - no_policy:
            del policy_mem
            only guest_reboot
            only after
    variants:
        - backend_ram:
            backend_mem = memory-backend-ram
            del discard-data
        - backend_file:
            # Notes:
            #     Before start testing, please ensure your host
            # kernel has support hugpage and have enough memory
            # to create guest memory
            backend_mem = memory-backend-file
            setup_hugepages = yes
            # mem path should be the hugpage path
            mem-path = /mnt/kvm_hugepage
            pre_command = "echo 3 > /proc/sys/vm/drop_caches"
            pre_command_noncritical = yes
        - backend_memfd:
            no Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1 Host_RHEL.m8.u2
            backend_mem = memory-backend-memfd
            setup_hugepages = yes
            hugetlb_mem = yes
            only hotplug unplug.pluged_memory
            only policy_default.two
            only after.guest_reboot
    variants operation:
        - unplug:
            no Windows
            no RHEL.7
            variants:
                - buildin_memory:
                    mem_devs += " buildin"
                    target_mems = "buildin"
                    only pause_vm
                    only during
                - pluged_memory:
                    plug_mem = "plug"
                    target_mems = "plug"
                    no during.pause_vm
                - unused_memory:
                    target_mems = "unused"
                    mem_devs += " ${target_mems}"
                    use_mem_unused = no
                    only guest_reboot
                    only after
        - hotplug:
            target_mems = "plug1 plug2"
    variants sub_test:
        - vm_system_reset:
            sub_type = boot
            reboot_method = system_reset
            sleep_before_reset = 0
            no during
            only backend_ram.policy_default backend_file.policy_bind
        - guest_reboot:
            sub_type = boot
            reboot_method = shell
            kill_vm_on_error = yes
            reboot_count = 1
            no during
        - guest_migration:
            sub_type = migration
            max_vms = 2
            Linux:
                migration_test_command = help
                migration_bg_command = "cd /tmp; nohup tcpdump -q -i any -t ip host localhost"
                migration_bg_check_command = pgrep tcpdump
                migration_bg_kill_command = pkill -9 tcpdump
            Windows:
                migration_test_command = ver && vol
                migration_bg_command = start ping -t localhost
                migration_bg_check_command = tasklist | find /I "ping.exe"
                migration_bg_kill_command = taskkill /IM ping.exe /F
            kill_vm_on_error = yes
            iterations = 2
            used_mem = 1024
            mig_timeout = 3600
            ping_pong = 1
            migration_protocol = "tcp"
            only after
        - pause_vm:
            sub_type = stop_continue
            pause_time = 10
            wait_resume_timeout = "${pause_time}"
            sub_test_wait_time = 10
            only backend_ram.policy_bind backend_file.policy_default
        - stress:
            sub_test_wait_time = 60
            Windows:
                timeout = 600
                autostress = yes
                sub_type = win_heavyload
                backup_image_before_testing = yes
                restore_image_after_testing = yes
                install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
                config_cmd = 'setx -m path "%PATH%;${install_path};"'
                install_cmd = "start /wait DRIVE:\HeavyLoadSetup.exe /verysilent"
                x86_64:
                    install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
                i386, i686:
                    install_path = "C:\Program Files\JAM Software\HeavyLoad"
            Linux:
                sub_type = linux_stress
                test_timeout = 1800
                stress_package = stress
            only backend_ram.policy_default backend_file.policy_bind
    variants stage:
        - before:
        - after:
        - during:
