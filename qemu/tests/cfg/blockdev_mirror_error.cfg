# The following testing scenario is covered:
#   Block mirror with '"on-source-error": "stop", "on-target-error": "stop"'
#     The mirror image is a local image(filesystem)

- blockdev_mirror_error:
    only Linux
    start_vm = no
    qemu_force_use_drive_expression = no
    type = blockdev_mirror_error
    virt_test_type = qemu
    images += " data1"
    source_images = data1
    target_images = mirror1
    remove_image_data1 = yes
    force_create_image_data1 = yes
    backup_options_data1 = sync on-source-error on-target-error
    sync = full
    tempfile_size = 110M
    on-source-error = stop
    on-target-error = stop
    storage_pools = default
    storage_pool = default
    storage_type_default = directory

    image_size_data1 = 2G
    image_size_mirror1 = ${image_size_data1}

    image_format_data1 = qcow2
    image_format_mirror1 = qcow2

    image_name_data1 = data1
    image_name_mirror1 = mirror1

    nbd:
        nbd_port_data1 = 10831
        image_format_data1 = raw
        force_create_image_data1 = no
    iscsi_direct:
        lun_data1 = 1
    ceph:
        image_format_data1 = raw
    iscsi:
        lun_data1 = 1
        image_format_data1 = raw
        force_create_image_data1 = no
        remove_image_data1 = no

    # Create mirror1 image under target_path
    target_path = /tmp/tmp_target_path
    tmp_image_file = /tmp/tmp_image_file
    pre_command = "mkdir -p ${target_path} && dd if=/dev/urandom of=${tmp_image_file} bs=1M count=100 &&"
    pre_command += " mkfs.ext4 ${tmp_image_file} && mount -o loop ${tmp_image_file} ${target_path}"
    post_command = "umount -f ${target_path} && rm -rf ${tmp_image_file} ${target_path}"
    pre_command_timeout = 30
    post_command_timeout = 30

    # For local mirror images
    enable_iscsi_mirror1 = no
    enable_ceph_mirror1 = no
    enable_gluster_mirror1 = no
    enable_nbd_mirror1 = no
    image_raw_device_mirror1 = no
