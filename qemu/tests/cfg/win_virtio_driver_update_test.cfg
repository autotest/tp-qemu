- win_virtio_driver_update_test:
    type = driver_in_use
    only Windows
    monitor_type = qmp
    monitors = qmp1
    cdroms += " virtio winutils"
    cd_format_fixed = ide
    q35:
        cd_format_fixed = ahci
    virtio_win_media_type = iso
    image_snapshot_image1 = yes
    kill_vm = yes
    kill_vm_on_error = yes
    check_guest_bsod = yes
    image_snapshot = yes
    login_timeout = 360
    suppress_exception = no
    sub_test = win_virtio_driver_update_test
    devcon_dirname = "win7_"
    vio_driver_chk_cmd = 'driverquery /si | find /i "%s"'
    key_to_install_driver = "tab;kp_enter"
    Win2008..sp2:
        devcon_dirname = "wlh_"
    WinXP, Win2003:
        devcon_dirname = "wxp_"
    i386:
        devcon_dirname += "x86"
    x86_64:
        devcon_dirname += "amd64"
    devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    del devcon_dirname
    variants:
        - uninstall_install:
            need_uninstall = yes
        - downgrade_upgrade:
            need_uninstall = no
            cdrom_virtio_downgrade = isos/windows/virtio-win-downgrade.iso
    variants:
        - before_bg_test:
            run_bg_flag = "before_bg_test"
        - during_bg_test:
            run_bg_flag = "during_bg_test"
            suppress_exception = yes
        - after_bg_test:
            run_bg_flag = "after_bg_test"
    variants:
        - with_balloon:
            driver_name = balloon
            balloon = balloon0
            balloon_dev_devid = balloon0
            balloon_dev_add_bus = yes
            driver_name = balloon
            device_name = "VirtIO Balloon Driver"
            device_hwid = '"PCI\VEN_1AF4&DEV_1002" "PCI\VEN_1AF4&DEV_1045"'
            driver_id_pattern = "(.*?):.*?VirtIO Balloon Driver"
            run_bgstress = balloon_check
            virtio_balloon_pause = 10.0
            free_mem_cmd = cat /proc/meminfo |grep MemFree
            run_sub_test_after_balloon = no
            test_tags = "evict enlarge"
            balloon_type_evict = evict
            balloon_type_enlarge = enlarge
            bg_stress_run_flag = balloon_test
            set_bg_stress_flag = yes
            wait_bg_time = 720
            guest_compare_threshold = 300
            guest_mem_ratio = 0.025
        - with_netkvm:
            driver_name = netkvm
            driver_verifier = ${driver_name}
            Win2016, Win2019, Win8..1, Win2012..r2:
                driver_verifier += " ndis"
            nics += " nic2"
            nic_model_nic1 = rtl8139
            nic_model_nic2 = virtio
            device_name = "Red Hat VirtIO Ethernet Adapter"
            device_hwid = '"PCI\VEN_1AF4&DEV_1000" "PCI\VEN_1AF4&DEV_1041"'
            hostpassword = redhat
            target_process = netperf.exe
            run_bgstress = netperf_stress
            netperf_link = netperf-2.6.0.tar.bz2
            server_path = /var/tmp/
            client_path = /var/tmp/
            test_protocols = TCP_STREAM
            netperf_client = ${vms}
            netperf_server = localhost
            netperf_test_duration = 200
            wait_before_subtest = 100
            ping_ext_host = "yes"
            ext_host_get_cmd = "ip route | awk '/default/ { print $3 }'"
            shell_client = "nc"
        - with_viostor:
            driver_name = viostor
            device_name = "Red Hat VirtIO SCSI controller"
            device_hwid = '"PCI\VEN_1AF4&DEV_1001" "PCI\VEN_1AF4&DEV_1042"'
            target_process = iozone.exe
            run_bgstress = iozone_windows
            drive_format_image1 = ide
            q35:
                drive_format_image1 = ahci
            images += " stg"
            image_name_stg = "images/storage"
            image_size_stg = 4G
            drive_format_stg = virtio
            disk_letter = I
            disk_index = 1
            format_disk = yes
            force_create_image_stg = yes
            remove_image_stg = yes
            driver_id_pattern = "(.*?):.*?VirtIO SCSI Disk Device"
            iozone_cmd = "WIN_UTILS:\Iozone\iozone.exe -azR -r 64k -n 1G -g 2G -M -i 0 -i 1 -b iozone.xls -f ${disk_letter}:\testfile"
            iozone_timeout = 7200
            wait_bg_time = 180
        - with_vioscsi:
            driver_name = vioscsi
            device_name = "Red Hat VirtIO SCSI pass-through controller"
            device_hwid = '"PCI\VEN_1AF4&DEV_1004" "PCI\VEN_1AF4&DEV_1048"'
            target_process = iozone.exe
            run_bgstress = iozone_windows
            drive_format_image1 = ide
            q35:
                drive_format_image1 = ahci
            images += " stg"
            image_name_stg = "images/storage"
            image_size_stg = 4G
            drive_format_stg = scsi-hd
            disk_letter = I
            disk_index = 1
            format_disk = yes
            force_create_image_stg = yes
            remove_image_stg = yes
            driver_id_pattern = "(.*?):.*?VirtIO SCSI pass-through controller"
            iozone_cmd = "WIN_UTILS:\Iozone\iozone.exe -azR -r 64k -n 1G -g 2G -M -i 0 -i 1 -b iozone.xls -f ${disk_letter}:\testfile"
            iozone_timeout = 7200
            wait_bg_time = 180
        - with_viorng:
            no no_virtio_rng
            driver_name = viorng
            device_name = "VirtIO RNG Device"
            device_hwid = '"PCI\VEN_1AF4&DEV_1005" "PCI\VEN_1AF4&DEV_1044"'
            run_bgstress = rng_bat
            target_process = random\w*.exe
            session_cmd_timeout = 240
            rng_data_rex = "0x\w"
            rng_dst  = "c:\random_%PROCESSOR_ARCHITECTURE%.exe"
            read_rng_cmd  = ${rng_dst}
            driver_id_pattern = "(.*?):.*?VirtIO RNG Device"
            i386:
                driver_id_cmd = 'WIN_UTILS:\devcon\wxp_x86\devcon.exe find * | find "VirtIO"'
                driver_check_cmd = "WIN_UTILS:\devcon\wxp_x86\devcon.exe status @DRIVER_ID"
            x86_64:
                driver_id_cmd = 'WIN_UTILS:\devcon\wnet_amd64\devcon.exe find * | find "VirtIO"'
                driver_check_cmd = "WIN_UTILS:\devcon\wnet_amd64\devcon.exe status @DRIVER_ID"
            during_bg_test:
                read_rng_cmd = for /l %i in (1, 1, 1000) do ${rng_dst}"
                driver_check_cmd = ""
        - with_pvpanic:
            only before_bg_test
            no Host_RHEL.m6
            driver_name = pvpanic
            device_name = "QEMU PVPanic Device"
            device_hwid = '"ACPI\QEMU0001"'
            run_bgstress = pvpanic
            event_check = "GUEST_PANICKED"
            crash_method = nmi
            timeout = 360
            backup_image_before_testing = yes
            restore_image_after_testing = yes
            set_panic_cmd = 'wmic class stdregprov call SetDwordValue hDefKey="&h80000002" sSubKeyName="SYSTEM\CurrentControlSet\Control\CrashControl" sValueName="NMICrashDump" uValue=1'
        - with_vioser:
            only during_bg_test
            driver_name = vioser
            device_name = "VirtIO Serial Driver"
            device_hwid = '"PCI\VEN_1AF4&DEV_1003" "PCI\VEN_1AF4&DEV_1043"'
            guest_scripts = VirtIoChannel_guest_send_receive.py;windows_support.py
            file_transfer_serial_port = vs1
            serials += " vs1"
            serial_type_vs1 = virtserialport
            transfer_timeout = 720
            filesize = 500
            host_script = serial_host_send_receive.py
            guest_script = VirtIoChannel_guest_send_receive.py
            run_bgstress = virtio_serial_file_transfer
            guest_script_folder = C:\
            clean_cmd = del /f /q
            tmp_dir = %TEMP%
            python_bin = python2.7
            file_sender = guest
            target_process = ${python_bin}.exe
        - with_vioinput:
            required_qemu = [2.4.0, )
            no Win2008..sp2
            only before_bg_test
            driver_name = "vioinput"
            device_name = "VirtIO Input Driver"
            device_hwid = '"PCI\VEN_1AF4&DEV_1052"'
            inputs = input1
            input_dev_bus_type_input1 = virtio
            del usb_devices
            variants:
                - device_keyboard:
                    input_dev_type_input1 = keyboard
                    run_bgstress = "vioinput_keyboard"
                    key_table_file = key_to_keycode_win.json
                - device_mouse:
                    mice_name = "QEMU Virtio Mouse"
                    input_dev_type_input1 = mouse
                    tolerance = 40
                    run_bgstress = vioinput_mice
                    move_rate = 80
                    move_duration = 1
                    btns = "left right middle side extra"
                    scrolls = "wheel-up wheel-down"
                - device_tablet:
                    mice_name = "QEMU Virtio Tablet"
                    input_dev_type_input1 = tablet
                    tolerance = 5
                    run_bgstress = vioinput_mice
                    move_rate = 80
                    move_duration = 1
                    btns = "left right middle side extra"
                    scrolls = "wheel-up wheel-down"
        - with_viofs:
            no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
            no Win2008 Win7
            virt_test_type = qemu
            required_qemu = [4.2.0,)
            filesystems = fs
            fs_driver = virtio-fs
            fs_source_type = mount
            fs_source_dir = virtio_fs_test/
            test_file = 'test_file'
            force_create_fs_source = yes
            remove_fs_source = yes
            fs_target = 'myfs'
            fs_driver_props = {"queue-size": 1024}
            mem_devs = mem1
            backend_mem_mem1 = memory-backend-file
            mem-path_mem1 = /dev/shm
            size_mem1 = ${mem}M
            use_mem_mem1 = no
            share_mem = yes
            guest_numa_nodes = shm0
            numa_memdev_shm0 = mem-mem1
            numa_nodeid_shm0 = 0
            driver_name = viofs
            device_name = "VirtIO FS Device"
            device_hwid = '"PCI\VEN_1AF4&DEV_105A"'
            target_process = fio.exe
            run_bgstress = virtio_fs_share_data
            driver_id_pattern = "(.*?):.*?VirtIO FS Device"
            viofs_svc_name = VirtioFsSvc
            # install winfsp tool
            i386, i686:
                install_winfsp_path = 'C:\Program Files'
            x86_64:
                install_winfsp_path = 'C:\Program Files (x86)'
            install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
            check_installed_cmd = 'dir "%s" |findstr /I winfsp'
            viofs_log_file = C:\\viofs_log.txt
            viofs_exe_path = C:\\virtiofs.exe
            viofs_exe_copy_cmd = xcopy %s C:\ /Y
            viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
            viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
            viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
            viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
            stress_bs = 4K
            fio_options = '--name=stress --filename=%s --ioengine=windowsaio --rw=write --direct=1 '
            fio_options += '--bs=%s --size=1G --iodepth=16 --numjobs=8 --runtime=1800 --thread'
            io_timeout = 2000
        - with_fwcfg:
            driver_name = "fwcfg"
            required_qemu = [6.0.0, )
            vmcoreinfo = yes
            start_vm = no
            only before_bg_test
            run_bgstress = fwcfg
            device_name = "QEMU FwCfg Device"
            device_hwid = '"ACPI\VEN_QEMU&DEV_0002"'
            tmp_dir = "/home/tmp"
            get_avail_disk = df -h /home | grep home | awk -F "G" '{print $3}'
            unzip_cmd = 'powershell -command "Expand-Archive %s:\Memory.dmp.zip %s:"'
            unzip_timeout = 1800
            dump_file = Memory.dmp
            move_cmd = "move {0}:\*${dump_file} {0}:\${dump_file}"
            save_path_cmd = "echo {0}:\${dump_file} > C:\dump_path.txt"
            del_path_file = "del C:\dump_path.txt"
            chk_id_cmd = 'type %s | find /i "LIVE_SYSTEM_DUMP (161)"'
            images += " stg"
            image_name_stg = "images/storage"
            remove_image_stg = yes
            no ppc64 ppc64le aarch64
            i386:
                windbg_path = "x86\windbg.exe"
                chk_windbg_cmd = 'dir "C:\Program Files\Windows Kits\10\Debuggers\%s"'
            x86_64:
                windbg_path = "x64\windbg.exe"
                chk_windbg_cmd = 'dir "C:\Program Files (x86)\Windows Kits\10\Debuggers\%s"'
            feature = "OptionId.WindowsDesktopDebuggers"
            sdk_setup = winsdksetup.exe
            Win8..1, Win2012..r1, Win2012..r2:
                sdk_setup = sdksetup_81.exe
                unzip_cmd = powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('%s:\Memory.dmp.zip', '%s:'); }"
                chk_windbg_cmd = 'dir "C:\Program Files (x86)\Windows Kits\8.1\Debuggers\%s"'
            Win2016:
                sdk_setup = sdksetup_1607.exe
            Win2019:
                sdk_setup = winsdksetup_1809.exe
            Win11, Win2022:
                sdk_setup = winsdksetup_11.exe
            windbg_install_cmd = "WIN_UTILS:\winsdksetup\${sdk_setup} /features %s /q"
            sdk_name = 'Windows Software Development Kit'
            chk_sdk_ins = 'wmic product get name,version | find /i "${sdk_name}"'
            chk_dump_cmd = "WIN_UTILS:\AutoIt3\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe WIN_UTILS:\check_dump_windbg.au3"
            dump_analyze_file = "C:\dump_analyze.log"
