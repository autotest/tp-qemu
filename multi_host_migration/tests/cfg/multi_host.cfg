- @multi_host:
    # params which ends with hostx will be sended only to machinex in autoserv
    # test command ./autoserv -m machine1,machine2 multi_host.srv
    # this mean host1 parmas will be send to machine1
    #           host2 params will be send to machine2 etc..

    remove_image_on_check_error = yes
    force_image_clone = no
    virt_test_type = qemu
    no JeOS
    variants multi_host_tests:
        - migrate_multi_host: install setup image_copy unattended_install.cdrom
            type = migration_multi_host
            not_preprocess_host1 = yes
            vms = "vm1"
            start_vm = no
            migration_test_command = help
            migration_bg_command = "cd /tmp; nohup tcpdump -q -i any -t ip host localhost > tcpdump.out 2>&1 &"
            migration_bg_check_command = pgrep tcpdump
            migration_bg_kill_command = pkill -9 tcpdump
            kill_vm_on_error = yes
            iterations = 2
            used_mem = 1024
            mig_timeout = 480
            disk_prepare_timeout = 360
            comm_port = 13234
            regain_ip_cmd = killall dhclient; sleep 10; dhclient;
            paused_after_start_vm = no
            need_to_login = yes
            preprocess_env = no

            variants mig_protocol:
                #Migration protocol.
                - tcp:
                - x-rdma:
                - rdma:
                - fd:
                - exec:

            variants migraiton_type:
                - mig_online:
                    mig_offline = no
                - mig_offline:
                    mig_offline = yes

            variants vhost_settings:
                - @vhost_src_no_dst_no:
                    netdev_extra_params_host1 = ""
                    netdev_extra_params_host2 = ""
                - vhost_src_yes_dst_yes:
                    netdev_extra_params_host1 = ",vhost=on"
                    netdev_extra_params_host2 = ",vhost=on"
                - vhost_src_yes_dst_no:
                    netdev_extra_params_host1 = ",vhost=on"
                    netdev_extra_params_host2 = ""
                - vhost_src_no_dst_yes:
                    netdev_extra_params_host1 = ""
                    netdev_extra_params_host2 = ",vhost=on"

            variants multihost_mig_tests:
                # Migration properties
                - after_login_vm:
                    type = migration_multi_host
                - early_boot_vm:
                    type = migration_multi_host
                    login_timeout = 420
                    paused_after_start_vm = yes
                    need_to_login = no
                    preprocess_env = yes
                    enable_random_timeout = yes
                    min_random_timeout = 5
                    max_random_timeout = 20
                - with_reboot:
                    login_timeout = 420
                    paused_after_start_vm = yes
                    preprocess_env = yes
                    enable_random_timeout = yes
                    min_random_timeout = 1
                    max_random_timeout = 5
                    reboot_method = system_reset
                    type = migration_multi_host_with_reboot
                - timedrift:
                    only Linux
                    rtc_drift = "slew"
                    type = migration_multi_host_timedrift
                    create_file = "touch /tmp/timedrift_test"
                    host_sync_time_cmd = "ntpdate -b pool.ntp.org"
                    migrate_count = 6
                    migration_timeout = 240
                    time_diff_limit = 1.5
                    check_clocksource_cmd = "cat /sys/devices/system/clocksource/clocksource0/current_clocksource"
                    variants:
                        - with_kvmclock:
                            clocksource = "kvm-clock"
                        - without_kvmclock:
                            cpu_model_flags += ",-kvmclock"
                            clocksource = "tsc"
                - cancel_with_delay:
                    type = migration_multi_host_cancel
                    cancel_delay = 10
                    stress_cmd = "stress --cpu 4 --io 4 --vm 2 --vm-bytes 128M &"
                    stress_kill_cmd = "killall -9 stress"
                - measure_speed:
                    only Linux
                    not_wait_for_migration = yes
                    mig_speed = 1G
                    type = migration_multi_host_with_speed_measurement
                - with_file_transfer:
                    only Linux
                    type = migration_multi_host_with_file_transfer
                    comm_port = 13234
                    del_file_with_err = yes
                    #path where file is stored on guest.
                    guest_path = "/tmp/file"
                    #size of generated file in MB.
                    file_size = 2048
                    transfer_timeout = 440
                    #Transfer speed in Mb
                    transfer_speed = 300
                    #Count of migration during file transfer.
                    migrate_count = 3
                    regain_ip_cmd = ""
                - with_stress:
                    type = migration_multi_host_with_stress
                    bg_stress_test = autotest_control
                    test_control_file = stress.control
                    control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 128M --timeout 120s"
                    check_running_cmd = "pgrep stress"
                    need_cleanup = no
                - set_downtime:
                    not_wait_for_migration = yes
                    type = migration_multi_host_downtime_and_speed
                    bg_stress_test = autotest_control
                    test_control_file = stress.control
                    control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 64M"
                    check_running_cmd = "pgrep stress"
                    kill_bg_stress_cmd = "killall -9 stress"
                    variants:
                        - before_migrate:
                            sub_type = before_migrate
                            mig_downtime = 5
                        - after_migrate:
                            sub_type = after_migrate
                            # downtime in seconds.
                            max_downtime = 10
                - speed:
                    sub_type = speed
                    # speed in Mb
                    min_migration_speed = 10M
                    max_migration_speed = 500M
                    # time interval in seconds.
                    # set how fast is migration speed changed.
                    change_speed_interval = 1
                    # speed is changed x time per min max interval
                    count_of_change = 10
                    not_wait_for_migration = yes
                    type = migration_multi_host_downtime_and_speed
                    bg_stress_test = autotest_control
                    test_control_file = stress.control
                    control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 64M"
                    check_running_cmd = "pgrep stress"
                    kill_bg_stress_cmd = "killall -9 stress"
                - mig_stop_during:
                    sub_type = stop_during
                    wait_before_stop = 3
                    not_wait_for_migration = no
                    type = migration_multi_host_downtime_and_speed
                    bg_stress_test = autotest_control
                    test_control_file = stress.control
                    control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 64M"
                    check_running_cmd = "pgrep stress"
                    kill_bg_stress_cmd = "killall -9 stress"
                - ping-pong-stress:
                    # amount of memory used for migration stress
                    # amount of memory shouldn't be too high otherwise
                    # migration will never end
                    type = migration_multi_host_ping_pong
                    # stress_memory should be less than troughput of
                    # migration
                    stress_memory = 50
                    migrate_count = 3
                    migration_timeout = 240
                    variants:
                        - @no_stress:
                            stress_type = none
                        - cpu_memory:
                            stress_type = cpu_memory
                        - disk:
                            disk_usage = 200
                            stress_type = disk
                        - all:
                            stress_type = all
                - ping-pong-kdump:
                    type = migration_multi_host_with_kdump
                    no Windows
                    no RHEL.3, RHEL.4
                    crash_timeout = 360
                    RHEL.5:
                      kdump_config = core_collector makedumpfile -c -d 31
                    RHEL.6:
                      kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args=crashkernel=128M@16M"
                      kdump_enable_cmd = "chkconfig kdump on && service kdump restart"
                      kdump_propagate_cmd = "service kdump propagate"
                      kdump_restart_cmd = "service kdump restart"
                      kdump_status_cmd = "service kdump status"
                    RHEL.7:
                      kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args=crashkernel=auto"
                      kdump_enable_cmd = "chkconfig kdump on && systemctl restart kdump.service"
                      kdump_propagate_cmd = "kdumpctl propagate"
                      kdump_restart_cmd = "systemctl restart kdump.service"
                      kdump_status_cmd = "systemctl status kdump.service"
                - with_xbzrle:
                    type = migration_multi_host_with_xbzrle
                    capabilitys = "xbzrle"
                    capabilitys_state = "disable"
                    cache_size = "67108864 1073741824"
                    max_migration_speed = 1000M
                    not_wait_for_migration = yes
                    Windows:
                       timeout = 600
                       autostress = yes
                       unload_stress_in_the_end = no
                       sleep_before_migration = 10
                       bg_stress_test = win_heavyload
                       backup_image_before_testing = yes
                       restore_image_after_testing = yes
                       config_cmd = 'setx -m path "%PATH%;${install_path};"'
                       install_cmd = "start /wait DRIVE:\HeavyLoadSetup.exe /verysilent"
                       check_running_cmd = "tasklist | findstr /I  HeavyLoad.exe"
                       kill_bg_stress_cmd = "taskkill /T /F /IM HeavyLoad.exe"
                       x86_64:
                           install_path = "C:\Program Files (x86)\JAM Software\HeavyLoad"
                       i386, i686:
                           install_path = "C:\Program Files\JAM Software\HeavyLoad"
                    Linux:
                       bg_stress_test = autotest_control
                       test_control_file = stress.control
                       control_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 128M --timeout 120s"
                       check_running_cmd = 'pgrep stress'
                       kill_bg_stress_cmd = "killall -9 stress"
                    variants:
                        - before_migrate_capability:
                            sub_type = before_migrate_capability
                            sub_test = "set_xbzrle enable disable"
                            need_stress = no
                            need_set_speed = yes
                            set_cache_size = no
                        - before_migrate_cache_size:
                            sub_type = before_migrate_cache_size
                            sub_test = "set_xbzrle enable"
                            need_stress = "yes"
                            Linux:
                               need_set_speed = yes
                            Windows:
                               need_set_speed = no
                            set_cache_size = "no yes"
                        - after_migrate_cache_size:
                            sub_type = after_migrate_cache_size
                            sub_test = "set_xbzrle enable"
                            need_stress = yes
                            need_set_speed = no
                            set_cache_size = yes
                - auto_converge:
                    only Linux
                    type = migration_multi_host_auto_converge
                    stressapptest_repo = "git clone https://github.com/stressapptest/stressapptest.git"
                    stressapptest_insatll_cmd = "rm -rf stressapptest && ${stressapptest_repo} && cd stressapptest && ./configure && make && make install"
                    check_running_cmd = "pgrep stressapptest"
                    kill_bg_stress_cmd = "killall -9 stressapptest"
                    capabilitys = "auto-converge"
                    capabilitys_state = "disable"
                    parameters = "cpu-throttle-initial cpu-throttle-increment"
                    parameters_value = "30 20"
                    max_migration_speed = 100M
                    migration_timeout = 180
                    not_wait_for_migration = yes
                    need_set_auto_converge = "no yes"
                    need_stress = yes
                    variants:
                        - dynamic_cpu_throttling:
                            sub_type = before_migrate_capability
                            sub_test = "auto-converge enable"
                            bg_stress_test = "stressapptest -M 150 -s 600 >/dev/null 2>&1 &"
                            need_set_speed = yes
                        - stress_load:
                            sub_type = before_migrate_load_host
                            sub_test = "auto-converge enable"
                            bg_stress_test = "stressapptest -M 100 -s 600 >/dev/null 2>&1 &"
                            load_host_cmd = "for(( I=0; I<`cat /proc/cpuinfo | grep processor | wc -l`;I++)) ; do echo $I; taskset -c $I /bin/bash -c 'for ((;;)); do X=1; done &' ; done"
                            sar_log_name = "/var/log/sa_log"
                            sar_cmd_in_guest = "while true; do sar 2 20 -u -r; done > ${sar_log_name} 2>&1 &"
                            get_sar_output_cmd = "tail -n 200 %s"
                            sar_cpu_str = "Average:        CPU"
                            sar_memory_str = "Average:    kbmemfree"
                            need_set_speed = no
                        - io_load:
                            sub_type = before_migrate_load_host_io
                            sub_test = "auto-converge enable"
                            bg_stress_test = "stressapptest -M 10 -s 120 >/dev/null 2>&1 &"
                            load_host_cmd = "for(( I=0; I<`cat /proc/cpuinfo | grep processor | wc -l`;I++)) ; do echo $I; taskset -c $I /bin/bash -c 'for ((;;)); do X=1; done &' ; done"
                            sar_log_name = "/var/log/sa_log"
                            sar_cmd_in_guest = "while true; do sar 2 20 -u -r; done > ${sar_log_name} 2>&1 &"
                            get_sar_output_cmd = "tail -n 200 %s"
                            sar_cpu_str = "Average:        CPU"
                            sar_memory_str = "Average:    kbmemfree"
                            need_set_speed = no
                - host_mig_offline:
                    only exec
                    host_mig_offline = yes
                    type = migration_multi_host
                - dest-problem-test:
                    variants:
                        - firewall-block:
                            type = migration_multi_host_firewall_block
                            not_wait_for_migration = yes
                            only tcp
                            variants:
                                - long_wait:
                                    sub_type = long_wait
                                    mig_timeout = 1200
                                    variants:
                                        - @wait_util_end:
                                            mig_cancel = no
                                        - mig_cancel:
                                            mig_cancel = yes
                                - short_interrupt:
                                    sub_type = short_interrupt

                - suspend:
                    type = migration_multi_host
                    post_sub_test = "guest_suspend"
                    variants:
                        - guest_s3:
                            guest_suspend_type = "mem"
                            services_up_timeout = 30
                        - guest_s4:
                            guest_suspend_type = "disk"

                - qxl:
                    variants:
                        - win_XP_VGA_mode:
                            # Guest has to be prepared for running with qlx
                            # driver. Drivers have to be properly installed
                            # before starting of the test. Otherwise the test
                            # could FAIL.
                            # tests steps:
                            #    1) starts windows XP guest on first host
                            #    2) try login to guest
                            #    3) starts presubtest steps with
                            #       stepsfile = WinXP-set-VGA-mode.steps
                            #       enable VGA mode on GPU
                            #    4) after presubtest finished starts migration
                            #       to host2
                            #    5) after migration starts postsubtests with
                            #       stepfile = WinXP-reset-VGA-mode.steps
                            only WinXP
                            type = migration_multi_host
                            start_migration_timeout = 0
                            not_preprocess_host1 = no
                            start_vm_host1 = yes
                            login_before_pre_tests = yes
                            not_login_after_mig = yes
                            pre_sub_test = steps
                            pre_sub_test_timeout = 360
                            post_sub_test = steps
                            steps_host1 = steps/WinXP-set-VGA-mode.steps
                            steps_host2 = steps/WinXP-reset-VGA-mode.steps
                            del regain_ip_cmd

                - cdrom_test:
                    only Linux
                    type = cdrom
                    preprocess_env = yes
                    cdrom_cd1 = "/mnt/nfs_images/orig.iso"
                    target_cdrom = cdrom_cd1
                    drive_serial_cd1 = test_abcd123
                    drive_werror_cd1 = stop
                    drive_rerror_cd1 = stop
                    tmp_dir = "/tmp"
                    src_file = "%s/%s"
                    dst_file = "${tmp_dir}/%s"
                    tray_check_cmd = "python ${tray_check_src} %s"
                    readonly_test_cmd = "echo y|mkfs.ext2 %s"
                    lock_cdrom_cmd = "eject -i on %s"
                    unlock_cdrom_cmd = "eject -i off %s"
                    eject_cdrom_cmd = "eject %s"
                    close_cdrom_cmd = "eject -t %s"
                    mount_cdrom_cmd = "mount %s %s"
                    umount_cdrom_cmd = "umount %s"
                    show_mount_cmd = "cat /etc/mtab"
                    remove_file_cmd = "rm -f ${tmp_dir}/%s"
                    copy_file_cmd = "cp -f %s/%s ${tmp_dir}/"
                    md5sum_cmd = "md5sum %s"
                    kill_vm_on_error = yes
                    cdrom_preapre_timeout = 360
                    not_preprocess_host1 = no
                    # test whether cdrom is unlocked <300s after boot
                    cdrom_test_autounlock = no
                    # test the tray status
                    cdrom_test_tray_status = yes
                    # wait before eject $cdrom (let OS initialize cdrom ...)
                    workaround_eject_time = 0
                    variants:
                        - cdrom_locking:
                            test_type = test_multihost_locking
                            cdrom_test_autounlock = yes
                            cdrom_test_locked = yes
                        - cdrom_ejecting:
                            test_type = test_multihost_ejecting
                            cdrom_cd1_host2 = /mnt/nfs_images/new.iso
                        - cdrom_copy:
                            test_type = test_multihost_copy
                            regain_ip_cmd = killall dhclient; sleep 2; dhclient;
                            cdrom_size = 100
                            copy_timeout = 480
                            checksum_timeout = 180

                - floppy_test:
                    type = floppy
                    no q35
                    no pseries
                    start_vm = no
                    floppies = "fl"
                    floppy_name = "images/test_floppy.img"
                    floppy_prepare_timeout = 480
                    guest_floppy_path = "/dev/fd0"
                    check_copy_path = "/tmp/check"
                    kill_vm_on_error = yes
                    floppy_preapre_timeout = 120
                    not_preprocess_host1 = no
                    # test whether cdrom is unlocked <300s after boot
                    variants:
                        - floppy_write:
                            only Linux
                            test_type = test_multihost_write
                            regain_ip_cmd = killall dhclient; sleep 2; dhclient;
                            copy_timeout = 480
                            checksum_timeout = 60
                            mount_dir = "/mnt"
                        - floppy_eject:
                            test_type = test_multihost_eject
                            Linux:
                                mount_dir = "/mnt"
                            Windows:
                                del regain_ip_cmd
                            second_floppy_name = "images/test_floppy.img"
                            floppy_name_host2 = "images/test_floppy2.img"

                - hotplug_disk_test:
                    type = migration_multi_host
                    start_vm_host1 = yes
                    not_preprocess_host1 = no
                    force_create_image = yes
                    force_create_image_image1 = no
                    remove_image = yes
                    remove_image_image1 = no
                    image_size_hot_disk = 1G
                    image_name_hot_disk = images/hot_plug
                    migration_sync_vms = yes
                    strict_mode = yes
                    variants:
                        - unplug:
                            images_host1 = "${images} hot_disk"
                            pre_sub_test = migration_multi_host_helper_tests
                            helper_test_host1 = hot_unplug_block_dev
                            unplug_block = " hot_disk"
                            check_vm_before_migration = no
                            check_vm_needs_restart_host2 = no
                            reuse_previous_config_host2 = yes
                            attempts = 100
                            attempts_timeout = 1
                        - hotplug:
                            images_host2 = "${images} hot_disk"
                            pre_sub_test = migration_multi_host_helper_tests
                            helper_test_host1 = hot_plug_block_dev
                            plug_block = " hot_disk"
                            check_vm_before_migration = no
                            check_vm_needs_restart_host2 = no
                            reuse_previous_config_host2 = yes
                            attempts = 100
                            attempts_timeout = 1

                - with_module_reload:
                    type = migration_multi_host_with_stress
                    preprocess_env = yes
                    #serial_login = yes
                    #not_login_after_mig = yes
                    bg_stress_test = driver_load
                    mig_timeout = 1500
                    repeats = 20
                    nics += " nic2"
                    virtio_net:
                        module_name = virtio_net
                        nic_model_nic2 = e1000
                    e1000:
                        module_name = e1000
                        nic_model_nic2 = virtio_net
                    rtl8139:
                        module_name = 8139cp
                        nic_model_nic2 = virtio_net
                    driver_id_pattern = ${module_name}
                    driver_id_cmd = lsmod | grep ${module_name}
                    driver_load_cmd = modprobe ${module_name}
                    driver_unload_cmd = modprobe -r ${module_name}
                    test_after_load = file_transfer
                    filesize = 100
                    transfer_timeout = 1000

                - with_data_plane:
                    only Host_RHEL.m7
                    only Linux
                    only virtio_blk virtio_scsi
                    type = migration_multi_host_with_stress
                    preprocess_env = yes
                    iothreads = iothread0
                    virtio_blk:
                        blk_extra_params_image1 = "iothread=${iothreads}"
                    virtio_scsi:
                        no Host_RHEL.m7.u0, Host_RHEL.m7.u1, Host_RHEL.m7.u2
                        bus_extra_params_image1 = "iothread=${iothreads}"
                    drive_werror_image1 = stop
                    drive_rerror_image1 = stop
                    bg_stress_test = autotest_control
                    test_control_file = fio.control
                    kill_bg_stress_cmd = "killall -9 fio"

        - cpuflags_multi_host:
            not_preprocess_host1 = yes
            variants:
                - cpu_stress:
                    type = cpuflags
                    test_type = test_multi_host_migration
                    vms = "vm1"
                    start_vm = no
                    #Try to start guest with all flags which are supported by host.
                    all_host_supported_flags = "no"
                    cpu_model = "core2duo:sse3"
                    guest_spec_flags = "fxsr_opt hypervisor ds pdpe1gb osxsave svm"
                    host_spec_flags = "pbe tm ds_cpl monitor acpi dtes64 ht tm2 xtpr est pdcm smx"
                    mig_timeout = 4800
                    kill_vm_on_error = yes
                    disk_prepare_timeout = 360
                    comm_port = 13234
                    regain_ip_cmd = killall dhclient; sleep 10; dhclient;
                    auto_cpu_model = no
                - cpu_offline:
                    type = cpuflags
                    test_type = test_multi_host_migration_onoff_cpu
                    vms = "vm1"
                    smp = "2"
                    disable_cpus = "1"
                    migrate_count = 2
                    start_vm = no
                    #Try to start guest with all flags which are supported by host.
                    all_host_supported_flags = "no"
                    cpu_model = "core2duo"
                    guest_spec_flags = "fxsr_opt hypervisor ds pdpe1gb osxsave svm"
                    host_spec_flags = "pbe tm ds_cpl monitor acpi dtes64 ht tm2 xtpr est pdcm smx"
                    mig_timeout = 4800
                    kill_vm_on_error = yes
                    disk_prepare_timeout = 360
                    comm_port = 13234
                    regain_ip_cmd = killall dhclient; sleep 10; dhclient;
                    auto_cpu_model = no

    only default_machine_types
    # For RHEL machine type.
    #only rhel_machine_types

    variants:
        - @default_machine_types:
            variants machine_type:
                - @pc:
                - pc-0.14:
                - pc-0.13:
                - pc-0.12:
                - pc-0.11:
                - pc-0.10:
                - isapc:

        - @rhel_machine_types:
            variants machine_type:
                - pc:
                - rhel5.4.0:
                - rhel5.4.4:
                - rhel5.5.0:
                - rhel6.0.0:
                - rhel6.2.0:
                - rhel6.3.0:
                - rhel6.4.0:

