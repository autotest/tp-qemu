- virtio_fs_rlimit_nofile:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_rlimit_nofile
    required_virtiofsd_version = [1.13.2-1,)
    virtiofsd_version_cmd = rpm -q virtiofsd | cut -d- -f2
    Win10.i386:
        mem = 4096
    fs_source_dir = /var/tmp/virtiofs_rlimit_nofile
    force_create_fs_source = no
    remove_fs_source = yes

    pre_command = "mkdir -p ${fs_source_dir} && cd ${fs_source_dir}"
    pre_command += " && for i in $(seq 1 1024); do touch file_$i.txt; done"
    virtiofs_socket_path = '/var/tmp/virtiofs_rlimit_nofile.sock'
    cmd_run_virtiofsd = '/usr/libexec/virtiofsd --socket-path ${virtiofs_socket_path} --shared-dir ${fs_source_dir}'

    vm_mem_share = yes
    vm_mem_backend = memory-backend-file
    vm_mem_backend_path = /dev/shm
    share_mem = yes
    !s390, s390x:
        mem_devs = mem1
        backend_mem_mem1 = memory-backend-file
        mem-path_mem1 = /dev/shm
        size_mem1 = ${mem}M
        use_mem_mem1 = no
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    Windows:
        # install winfsp tool
        i386, i686:
            install_winfsp_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_winfsp_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        debug_log_operation = 'enable'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_debug_delete_cmd = 'reg delete HKLM\Software\VirtIO-FS /v DebugFlags /f'
        viofs_log_delete_cmd = 'reg delete HKLM\Software\VirtIO-FS /v DebugLogFile /f'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
    variants:
        - rlimit_nofile_512:
            start_vm = no
            rlimit_nofile = 512
            cmd_run_virtiofsd += " --rlimit-nofile ${rlimit_nofile}"
            expected_msg = "Maximum number of file descriptors too small: Limit is 512, must be at least 610"
        - rlimit_nofile_610:
            start_vm = no
            rlimit_nofile = 610
            cmd_run_virtiofsd += " --rlimit-nofile ${rlimit_nofile}"
            expected_msg = "File descriptor count limit is very small, leaving only 0 file descriptors for the guest"
        - rlimit_nofile_1000:
            kill_vm = yes
            start_vm = yes
            filesystems = fs
            fs_driver = virtio-fs
            fs_source_type = mount
            fs_target = 'myfs'
            fs_driver_props = {"queue-size": 1024}
            fs_dest = '/mnt/${fs_target}'
            driver_name = viofs
            rlimit_nofile = 1000
            fs_binary_extra_options += " --rlimit-nofile ${rlimit_nofile}"
            list_file_cmd = "ls -c %s"
            ls_check_content = "Too many open files in system"
            Windows:
                list_file_cmd = "dir %s"
                ls_check_content = "388 File(s)"
        - rlimit_nofile_2048:
            kill_vm = yes
            start_vm = yes
            filesystems = fs
            fs_driver = virtio-fs
            fs_source_type = mount
            fs_target = 'myfs'
            fs_driver_props = {"queue-size": 1024}
            fs_dest = '/mnt/${fs_target}'
            driver_name = viofs
            rlimit_nofile = 2048
            fs_binary_extra_options += " --rlimit-nofile ${rlimit_nofile}"
            list_file_cmd = "ls %s"
            Windows:
                list_file_cmd = "dir %s"
