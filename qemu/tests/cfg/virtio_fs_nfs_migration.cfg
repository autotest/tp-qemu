- virtio_fs_nfs_migration:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7 Win2012 Win2012..r2 Win8 Win8.1

    type = virtio_fs_nfs_migration
    virt_test_type = qemu
    required_qemu = [9.0.0,)
    kill_vm = yes
    start_vm = yes
    not_preprocess = yes

    # Setup the 1st nfs server
    setup_local_nfs = yes
    export_options = 'rw,insecure,no_root_squash,async'
    export_dir = /var/tmp/virtio_fs_test_nfs
    nfs_mount_options = rw
    nfs_mount_dir = /var/tmp/mnt/fs
    nfs_mount_dir_target = /var/tmp/mnt/targetfs

    filesystems = fs
    filesystems_migration = targetfs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir_fs = ${nfs_mount_dir}
    fs_source_dir_targetfs = ${nfs_mount_dir_target}
    fs_target = myfs
    fs_dest = /tmp/mnt/${fs_target}
    force_create_fs_source = no
    remove_fs_source = no
    fs_driver_props = {"queue-size": 1024}
    fs_binary_extra_options = ""
    fs_binary_extra_options_targetfs = ""
    driver_name = viofs

    test_file = test_file
    guest_file = "%s/${test_file}"
    pre_command = "mkdir -p ${nfs_mount_dir_target}"
    post_command = "rm -rf ${nfs_mount_dir_target} ${export_dir}"
    cmd_md5 = 'md5sum %s/${test_file}'
    cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=100 oflag=direct'
    fio_name = this_is_fiotest
    fio_filename = %s/${test_file}.fio
    numjobs = 4
    fio_options = '--name=${fio_name} --filename=%s --ioengine=libaio'
    fio_options += ' --rw=rw --bs=1k --size=200M --numjobs=${numjobs} --runtime=1800 --time_based'
    cmd_chk_fio = "ps -ef | grep fio | grep ${fio_name} | grep -v grep"

    share_mem = yes
    vm_mem_share = yes
    # Note that memory-backend-file can cause error when doing live migration
    vm_mem_backend = memory-backend-memfd
    Win10.i386:
        mem = 4096
    !s390, s390x:
        mem_devs = mem1
        backend_mem_mem1 = memory-backend-memfd
        size_mem1 = ${mem}M
        use_mem_mem1 = no
        guest_numa_nodes = shm0
        numa_memdev_shm0 = mem-mem1
        numa_nodeid_shm0 = 0
    Windows:
        # install winfsp tool
        i386, i686:
            install_winfsp_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_winfsp_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        debug_log_operation = 'enable'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_debug_delete_cmd = 'reg delete HKLM\Software\VirtIO-FS /v DebugFlags /f'
        viofs_log_delete_cmd = 'reg delete HKLM\Software\VirtIO-FS /v DebugLogFile /f'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
        cmd_md5 = "%s: && md5sum.exe ${test_file}"
        cmd_dd = 'dd if=/dev/random of=%s bs=1M count=100'
        guest_file = "%s:\${test_file}"
        fio_options = '--name=${fio_name} --filename=%s --ioengine=windowsaio'
        fio_options += ' --rw=rw --bs=1k --size=200M --numjobs=${numjobs} --runtime=1800 --time_based --thread'
        fio_name = fio.exe
        cmd_chk_fio = 'TASKLIST /FI "IMAGENAME eq FIO.EXE'
        fio_filename = "%s\:\${test_file}.fio"
    variants:
        - cache_mode_auto:
            fs_binary_extra_options += " --cache auto"
            fs_binary_extra_options_targetfs += " --cache auto"
        - cache_mode_always:
            fs_binary_extra_options += " --cache always"
            fs_binary_extra_options_targetfs += " --cache always"
        - cache_mode_never:
            fs_binary_extra_options += " --cache never"
            fs_binary_extra_options_targetfs += " --cache never"
        - cache_mode_metadata:
            fs_binary_extra_options += " --cache metadata"
            fs_binary_extra_options_targetfs += " --cache metadata"
    variants:
        - @default:
        - writeback:
            only cache_mode_auto cache_mode_always
            migrate_parameters = "{'downtime-limit': 30000}"
            fs_binary_extra_options += " --writeback"
            fs_binary_extra_options_targetfs += " --writeback"
        - dio:
            only cache_mode_never
            fs_binary_extra_options += " --allow-direct-io"
            fs_binary_extra_options_targetfs += " --allow-direct-io"
    variants:
        - find_paths:
        - file_handles:
            required_virtiofsd_version = [1.13.0,)
            virtiofsd_version_cmd = rpm -q virtiofsd | cut -d- -f2
            fs_binary_extra_options_targetfs += " --modcaps=+dac_read_search"
            variants:
                - never:
                    fs_binary_extra_options += " --inode-file-handles=never --migration-mode=file-handles --modcaps=+dac_read_search"
                - mandatory:
                    fs_binary_extra_options += " --inode-file-handles=mandatory --migration-mode=file-handles --modcaps=+dac_read_search"
    variants:
        - @default:
        - multifs:
            only find_paths.default.cache_mode_auto

            filesystems += " fs2"
            filesystems_migration += " targetfs2"
            fs_binary_extra_options_targetfs2 = " --cache auto"

            # Setup the 2nd nfs server
            export_dir_fs2 = /var/tmp/virtio_fs_test_nfs2
            nfs_mount_dir_fs2 = /var/tmp/mnt/fs2
            nfs_mount_dir_target_fs2 = /var/tmp/mnt/targetfs2

            fs_source_dir_fs2 = ${nfs_mount_dir_fs2}
            fs_target_fs2 = myfs2
            fs_dest_fs2 = /tmp/mnt/${fs_target_fs2}
            fs_source_dir_targetfs2 = ${nfs_mount_dir_target_fs2}
            fs_target_targetfs2 = ${fs_target_fs2}
            fs_dest_targetfs2 = ${fs_dest_fs2}

            pre_command += " && mkdir -p ${nfs_mount_dir_target_fs2}"
            post_command += " && rm -rf ${nfs_mount_dir_target_fs2} ${export_dir_fs2}"
            fio_filename = "%s/${test_file}.fio:%s/${test_file}.fio"
            Windows:
                clone_master = yes
                master_images_clone = image1
                remove_image_image1 = yes
                viofs_svc_name = WinFSP.Launcher
                i386, i686:
                    cmd_path = 'C:\Program Files'
                    win_type = x86
                x86_64:
                    cmd_path = 'C:\Program Files (x86)'
                    win_type = x64
                viofs_sc_create_cmd = '"${cmd_path}\WinFsp\bin\fsreg.bat" virtiofs "${viofs_exe_path}" "-t %1 -m %2"'
                instance_start_cmd = '"${cmd_path}\WinFsp\bin\launchctl-${win_type}.exe" start virtiofs viofs%s %s %s'
                instance_stop_cmd = '"${cmd_path}\WinFsp\bin\launchctl-${win_type}.exe" stop virtiofs viofs%s'
                volume_label_fs = X:
                volume_label_fs2 = Y:
                fio_filename = "%s\:\${test_file}.fio:%s\:\${test_file}.fio"
