- timerdevice:
    no Host_RHEL.m6
    restart_vm = yes
    host_cpu_cnt_cmd = "cat /proc/cpuinfo | grep "physical id" | wc -l"
    no aarch64
    Linux:
        hwclock_time_command = "LC_TIME=C hwclock -u"
        hwclock_time_filter_re = "(\d+-\d+-\d+ \d+:\d+:\d+).*"
        hwclock_time_format = "%Y-%m-%d %H:%M:%S"
        RHEL.7:
            hwclock_time_filter_re = "(\S+ \S+ \d+ \d+:\d+:\d+ \d+).*"
            hwclock_time_format = "%a %b %d %H:%M:%S %Y"
    variants:
        - tscwrite:
            no RHEL.6
            type = timerdevice_tscwrite
            msr_tools_install_cmd = "yum install -y msr-tools"
            msr_tools_cmd = "a=$(rdmsr -d 0x00000010); echo -e ibase=16\\n $a  | tail -n 1 | while read n; do wrmsr 0x00000010 $(($n+100000000000)); echo $n; done"
        - clock_drift_with_sleep:
            only RHEL
            type = timerdevice_clock_drift_with_sleep
            rtc_base = utc
            rtc_clock = host
            i386, x86_64:
                rtc_drift = slew
            ntp_sync_cmd = "(systemctl stop chronyd || service ntpdate stop)"
            ntp_sync_cmd += " && chronyd -q 'server clock.redhat.com iburst'"
        - clock_drift_with_ntp:
            only Linux
            no RHEL.6
            type = timerdevice_clock_drift_with_ntp
            test_run_timeout = 7200
        - change_guest_clksource:
            only RHEL
            type = timerdevice_change_guest_clksource
            rtc_base = utc
            rtc_clock = host
            i386, x86_64:
                rtc_drift = slew
        - boot_test:
            no RHEL.3 RHEL.4 RHEL.5 RHEL.6
            type = timerdevice_boot
            i386, x86_64:
                rtc_drift = slew
            timerdevice_drift_threshold = 3
            clock_sync_command = "(systemctl stop chronyd || service ntpdate stop)"
            clock_sync_command += " && chronyd -q 'server clock.redhat.com iburst'"
            # role out ntp server factor
            nics = ""
            extra_params += "-net none"
            variants:
                - clock_host:
                    rtc_clock = host
                - clock_vm:
                    rtc_clock = vm
            variants:
                - base_utc:
                    no Windows
                    rtc_base = utc
                - base_localtime:
                    only Windows
                    rtc_base = localtime
                - base_date:
                    rtc_base = "2020-06-17"
            variants:
                - clksource_unchanged:
                    only Windows
                    timerdevice_clksource = ""
                - clksource_kvm-clock:
                    only x86_64
                    only RHEL
                    timerdevice_clksource = "kvm-clock"
                - clksource_tsc:
                    # Fedora guest can't bootup without '-kvmclock' option.
                    only RHEL
                    timerdevice_clksource = "tsc"
                - clksource_timebase:
                    only RHEL
                    only ppc64 ppc64le
                    timerdevice_clksource = "timebase"
            variants:
                - with_boot:
                - with_reboot:
                    timerdevice_reboot_test = yes
                    variants:
                        - without_host_load:
                        - with_host_load:
                            timerdevice_host_load_cmd = "for (( I=0; I<`grep processor /proc/cpuinfo"
                            timerdevice_host_load_cmd += " | wc -l`; I++ )); do taskset -c $I /bin/bash -c"
                            timerdevice_host_load_cmd += " 'for ((;;)); do X=1; done &'; done"
                            timerdevice_host_load_stop_cmd = "pkill -f 'do X=1'"
                    variants:
                        - reboot_immediately:
                        - reboot_after_sleep:
                            timerdevice_sleep_time = 3600
        - tscsync:
            only Linux
            no RHEL.6
            variants:
                - change_host_clksource:
                    type = timerdevice_tscsync_change_host_clksource
                    test_run_timeout = 10
                - longtime:
                    type = timerdevice_tscsync_longtime
                    host_socket_cnt_cmd = "cat /proc/cpuinfo | grep "physical id" | uniq | wc -l"
                    test_timeout = 36000
                    test_run_timeout = 14400
                    variants:
                        - one_socket:
                            vcpu_socket = 1
                        - two_sockets:
                            vcpu_socket = 2
        - newer_msrs_support_check:
            only Linux
            no Host_RHEL.m6.u0
            no RHEL.6.0 RHEL.6.1 RHEL.6.2 RHEL.6.3
            type = timerdevice_kvmclock_newer_msrs_support
            rtc_base = utc
            rtc_clock = host
            i386, x86_64:
                rtc_drift = slew
            msrs = "4b564d01 4b564d00"
            msrs_catch_re = "kvm-clock: Using msrs (\w+) and (\w+)"
        - measure_time_jump:
            only Linux
            type = timerdevice_time_jump_check
            rtc_base = utc
            rtc_clock = host
            i386, x86_64:
                rtc_drift = slew
            check_cmd = "for i in `seq 20`; do date +'%y-%m-%d %H:%M:%S';done"
            host_cpu_cnt_cmd = "cat /proc/cpuinfo | grep "physical id" | wc -l"
        - set_time_back:
            only Linux
            type = timerdevice_host_time_back
            ntp_server = clock.redhat.com
            clock_sync_command = "(systemctl stop chronyd || service ntpdate stop)"
            clock_sync_command += " && chronyd -q 'server clock.redhat.com iburst'"
            rtc_base = utc
            rtc_clock = host
            i386, x86_64:
                rtc_drift = slew
            extra_param = '-global kvm-pit.lost_tick_policy=discard'
            seconds_to_back = 1800
            set_host_time_back_cmd = 'date -s "-${seconds_to_back} seconds"'
            epoch_time_cmd = 'epoch=$(date +%s); datetime=$(date);'
            epoch_time_cmd += 'echo "datetime: $datetime epoch: $epoch"'
            tolerance = 3.0
            # when host time set back, guest time should start from continue
            # after rebooting, not same with host system time
            time_difference = ${seconds_to_back}
