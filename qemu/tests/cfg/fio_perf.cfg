- fio_perf:
    only x86_64,ppc64,ppc64le
    type = fio_perf
    numa_node = -1
    block_size = "4k 16k 64k 256k"
    format = False
    iodepth = "1 8 64"
    threads = "16"
    rw = "read write randread randwrite randrw"
    Host_RHEL:
        kvm_ver_chk_cmd = "rpm -q qemu-kvm-rhev || rpm -q qemu-kvm"
    Linux:
        no ide
        pattern = ".*[read|write].*bw=(\d+(?:\.\d+)?[\w|\s]B/s),\siops=(\d+).*"
        order_list = "Block_size Iodepth Threads BW(MB/S) IOPS Latency(ms) Host_CPU BW/CPU KVM_Exits Util%"
        guest_ver_cmd = "uname -r"
        check_install_fio = "which fio"
        tarball = "performance/fio-2.2.9.tar.gz"
        fio_path = "/tmp/fio-2.2.9"
        compile_cmd = "make && make install"
        pre_cmd = "i=`/bin/ls /dev/[vs]db` && mkfs.xfs $i > /dev/null; partprobe; umount /mnt; mount $i /mnt"
        ppc64, ppc64le:
            virtio_blk:
                pre_cmd = "i=`/bin/ls /dev/vda` && mkfs.xfs $i > /dev/null; partprobe; umount /mnt; mount $i /mnt"
        drop_cache = "sync && echo 3 > /proc/sys/vm/drop_caches"
        guest_result_file = /tmp/fio_result
        fio_cmd = "fio --rw=%s --bs=%s --iodepth=%s --runtime=1m --direct=1 --filename=/mnt/%s --name=job1 --ioengine=libaio --thread --group_reporting --numjobs=%s --size=512MB --time_based --output=/tmp/fio_result &> /dev/null"
    Windows:
        virtio_blk:
            guest_ver_cmd = wmic datafile where name="c:\\windows\\system32\\drivers\\viostor.sys"
        virtio_scsi:
            guest_ver_cmd = wmic datafile where name="c:\\windows\\system32\\drivers\\vioscsi.sys"
        pattern = ".*?\s{2}[read|write].*?bw=(\d+(?:\.\d+)?[\w|\s]B/s),\siops=(\d+)"
        order_list = "Block_size Iodepth Threads BW(MB/S) IOPS Latency(ms) Host_CPU BW/CPU KVM_Exits"
        check_install_fio = "dir C:\fio-2.0.15-x64\ | findstr /I fio"
        tarball = "performance/fio-2.0.15-x64/*"
        fio_path = "C:\fio-2.0.15-x64"
        pre_cmd = "echo select disk 1 > imDiskpart.script && echo create partition primary >> imDiskpart.script && echo assign letter=I >> imDiskpart.script&& echo exit >> imDiskpart.script && diskpart /s imDiskpart.script && format I: /FS:NTFS /V:local /Q /y"
        online_disk_cmd = "echo select disk %s > imDiskpart.script && echo online disk >> imDiskpart.script && echo attr disk clear readonly >> imDiskpart.script && echo exit >> imDiskpart.script && diskpart /s imDiskpart.script"
        guest_result_file = "C:\fio_result"
        fio_cmd = 'cmd /c C:\fio-2.0.15-x64\fio.exe --rw=%s --bs=%s --iodepth=%s --runtime=1m --direct=1 --filename=I\:\%s --name=job1 --ioengine=windowsaio --thread --group_reporting --numjobs=%s --size=512MB --time_based --output="C:\\fio_result"'
    variants:
        - file_system_block:
            image_size_disk1 = 40G
            force_create_image_disk1 = yes
            remove_image_disk1 = yes
            format = True
            variants:
                - localfs:
                    #You can specify your own directory which data disk is in. In our actual test, the /mnt is mounted on a ssd.
                    image_name_disk1 = /mnt/storage2
                    Linux:
                        vhost_nic1 =
                - nfs_block:
                    image_name_disk1 = images/storage2
        - raw_disk:
            no ppc64,ppc64le
            image_raw_device_disk1 = yes
            vhost_nic1 =
            remove_image = no
            Linux:
                fio_cmd = "i=`/bin/ls /dev/[vs]db` && fio --rw=%s --bs=%s --iodepth=%s --runtime=1m --direct=1 --filename=$i --name=job1 --ioengine=libaio --thread --group_reporting --numjobs=%s --time_based --output=/tmp/fio_result &> /dev/null"
            Windows:
                fio_cmd = 'cmd /c C:\fio-2.0.15-x64\fio.exe --rw=%s --bs=%s --iodepth=%s --runtime=1m --direct=1 --filename=\\.\PHYSICALDRIVE1 --name=job1 --ioengine=windowsaio --thread --group_reporting --numjobs=%s --size=512MB --time_based --output="C:\\fio_result"'
            variants:
                - fusion-io:
                    #Pls specify your own fusion-io ssd in the host.
                    image_name_disk1 = /dev/fioa
                - NVMe:
                    #Pls specify your own NVMe disk in the host.
                    image_name_disk1 = /dev/nvme0n1
    variants:
        - single_disk:
            images += " disk1"
            num_disk = "1"
