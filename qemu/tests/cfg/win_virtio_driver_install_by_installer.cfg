- win_virtio_driver_install_by_installer:
    type = win_virtio_driver_install_by_installer
    only Windows
    virtio_win_media_type = iso
    cdroms += " virtio"
    clone_master = yes
    master_images_clone = image1
    remove_image_image1 = yes
    cd_format_fixed = ide
    drive_format_image1 = ide
    q35:
        cd_format_fixed = ahci
        drive_format_image1 = ahci
    vio_driver_chk_cmd = 'driverquery /si | find /i "%s"'
    chk_timeout = 240
    install_script_path = "WIN_UTILS:\install.au3"
    repair_script_path = "WIN_UTILS:\repaire.au3"
    uninstall_script_path = "WIN_UTILS:\uninstall.au3"
    run_install_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\install.au3'
    run_repair_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\repaire.au3'
    run_uninstall_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\uninstall.au3'
    installer_pkg_check_cmd = 'wmic product get name |findstr "Virtio-win-driver-installer"'
    signed_check_cmd = 'wmic product where name="Virtio-win-driver-installer" | findstr "Red Hat, Inc."'
    monitor_type = qmp
    monitors = qmp1
    mem_stat_check_list = 'stat-free-memory'
    check_mem_diff = 300
    guest_compare_threshold = 300
    guest_mem_ratio = 0.025
    devcon_dirname = "win7_"
    i386:
        devcon_dirname += "x86"
        qemu_ga_pkg = qemu-ga-i386.msi
    x86_64:
        devcon_dirname += "amd64"
        qemu_ga_pkg = qemu-ga-x86_64.msi
    devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    del devcon_dirname
    gagent_install_cmd = "start /wait %s /quiet"
    gagent_pkg_info_cmd = 'wmic product where name="Qemu guest agent"'
    gagent_uninstall_cmd = "wmic product where name='Qemu guest agent' call uninstall"
    Win8, Win2012, Win2012..r2:
        need_reboot = yes
    nic_model_nic1 = rtl8139
    q35:
        nic_model_nic1 = e1000e
    # install winfsp tool
    i386, i686:
        install_winfsp_path = 'C:\Program Files'
    x86_64:
        install_winfsp_path = 'C:\Program Files (x86)'
    variants:
        - @all_drivers:
            nics += " nic2"
            nic_model_nic2 = virtio
            no_virtio_rng:
                virtio_rngs += " rng0"
                backend_rng0 = rng-builtin
                backend_type = builtin
            images += " stg0 stg1"
            image_name_stg0 = "images/stg0"
            image_name_stg1 = "images/stg1"
            image_size_stg0 = 5G
            image_size_stg1 = 10G
            drive_format_stg0 = virtio
            drive_format_stg1 = scsi-hd
            remove_image_stg0 = yes
            remove_image_stg1 = yes
            force_create_image_stg0 = yes
            force_create_image_stg1 = yes
            serials += " vs"
            serial_type_vs = virtserialport
            balloon = balloon0
            balloon_dev_devid = balloon0
            balloon_dev_add_bus = yes
            guest_compare_threshold = 300
            guest_mem_ratio = 0.025
            inputs = input1
            input_dev_bus_type_input1 = virtio
            input_dev_type_input1 = mouse
            vmcoreinfo = yes
            filesystems = fs
            fs_driver = virtio-fs
            fs_source_type = mount
            fs_source_dir = virtio_fs_test/
            force_create_fs_source = yes
            remove_fs_source = yes
            fs_target = 'myfs'
            fs_driver_props = {"queue-size": 1024}
            mem = 4096
            mem_devs = mem1
            backend_mem_mem1 = memory-backend-file
            mem-path_mem1 = /dev/shm
            size_mem1 = 4G
            use_mem_mem1 = no
            share_mem = yes
            guest_numa_nodes = shm0
            numa_memdev_shm0 = mem-mem1
            numa_nodeid_shm0 = 0
            fs_binary_extra_options = " -o cache=auto"
            test_drivers = 'balloon viostor vioscsi viorng viofs'
            driver_test_name_viorng = 'rng'
            driver_test_name_viostor = 'iozone'
            driver_test_params_viostor = {'images': 'stg0'}
            driver_test_name_vioscsi = 'iozone'
            driver_test_params_vioscsi = {'images': 'stg1'}
            driver_test_name_viofs = "viofs_basic_io"
            driver_test_name_balloon = "balloon"
            iozone_cmd_opitons = " -azR -r 64k -n 512M -g 1G -M -I -i 0 -i 1 -b iozone.xls -f %s:\testfile"
            read_rng_cmd = "WIN_UTILS:\\random_%PROCESSOR_ARCHITECTURE%.exe"
        - single_driver:
            serials += " vs"
            serial_type_vs = virtserialport
            variants:
                - with_viorng:
                    driver_name = viorng
                    device_name = "VirtIO RNG Device"
                    device_hwid = '"PCI\VEN_1AF4&DEV_1005" "PCI\VEN_1AF4&DEV_1044"'
                    no_virtio_rng:
                        virtio_rngs += " rng0"
                        backend_rng0 = rng-builtin
                        backend_type = builtin
                    read_rng_cmd = "WIN_UTILS:\\random_%PROCESSOR_ARCHITECTURE%.exe"
                    driver_test_names = 'rng'
                - @with_storage:
                    images += " stg0"
                    image_name_stg0 = "images/stg0"
                    image_size_stg0 = 5G
                    remove_image_stg0 = yes
                    force_create_image_stg0 = yes
                    driver_test_names = 'iozone'
                    driver_test_params = {'images': 'stg0'}
                    iozone_cmd_opitons = " -azR -r 64k -n 512M -g 1G -M -I -i 0 -i 1 -b iozone.xls -f %s:\testfile"
                    variants:
                        - with_viostor:
                            driver_name = viostor
                            device_name = "Red Hat VirtIO SCSI controller"
                            device_hwid = '"PCI\VEN_1AF4&DEV_1001" "PCI\VEN_1AF4&DEV_1042"'
                            drive_format_stg0 = virtio
                        - with_vioscsi:
                            driver_name = vioscsi
                            device_name = "Red Hat VirtIO SCSI pass-through controller"
                            device_hwid = '"PCI\VEN_1AF4&DEV_1004" "PCI\VEN_1AF4&DEV_1048"'
                            drive_format_stg0 = scsi-hd
                - with_pvpanic:
                    driver_name = pvpanic
                    vmcoreinfo = yes
                    device_name = "QEMU PVPanic Device"
                    device_hwid = '"ACPI\\QEMU0001"'
                    set_panic_cmd = 'wmic class stdregprov call SetDwordValue hDefKey="&h80000002" sSubKeyName="SYSTEM\CurrentControlSet\Control\CrashControl" sValueName="NMICrashDump" uValue=1'
                    expect_event = "GUEST_CRASHLOADED"
                    driver_test_names = 'pvpanic'
                - with_vioser:
                    driver_test_names = "vioser"
                    device_name = "VirtIO Serial Driver"
                    driver_name = vioser
                    device_hwid = '"PCI\\VEN_1AF4&DEV_1003" "PCI\\VEN_1AF4&DEV_1043"'
                    file_transfer_serial_port = vs
                    guest_script = VirtIoChannel_guest_send_receive.py
                    clean_cmd = del /f
                    guest_script_folder = C:\
                    filesize = 1000
                    transfer_timeout = 720
                    tmp_dir = %TEMP%
                    host_script = serial_host_send_receive.py
                    python_bin = python2.7
                - with_netkvm:
                    nics += " nic2"
                    nic_model_nic2 = virtio
                    driver_name = netkvm
                    device_name = "Red Hat VirtIO Ethernet Adapter"
                    device_hwid = '"PCI\\VEN_1AF4&DEV_1000" "PCI\\VEN_1AF4&DEV_1041"'
                    driver_test_names = 'netkvm'
                    get_host_ip_cmd = "ip route | awk '/default/ { print $3 }'"
                - with_fwcfg:
                    driver_name = fwcfg
                    device_name = QEMU FwCfg Device
                    device_hwid = '"ACPI\VEN_QEMU&DEV_0002"'
                    driver_test_names = 'fwcfg'
                    vmcoreinfo = yes
                    tmp_dir = "/var/tmp"
                - with_viofs:
                    filesystems = fs
                    fs_driver = virtio-fs
                    fs_source_type = mount
                    fs_source_dir = virtio_fs_test/
                    force_create_fs_source = yes
                    remove_fs_source = yes
                    fs_target = 'myfs'
                    fs_dest = "/mnt/${fs_target}"
                    fs_driver_props = {"queue-size": 1024}
                    mem = 4096
                    mem_devs = mem1
                    backend_mem_mem1 = memory-backend-file
                    mem-path_mem1 = /dev/shm
                    size_mem1 = 4G
                    use_mem_mem1 = no
                    share_mem = yes
                    !s390, s390x:
                        guest_numa_nodes = shm0
                        numa_memdev_shm0 = mem-mem1
                        numa_nodeid_shm0 = 0
                    driver_name = viofs
                    device_name = "VirtIO FS Device"
                    device_hwid = '"PCI\\VEN_1AF4&DEV_105A"'
                    driver_test_names = 'viofs_basic_io'
                - with_balloon:
                    driver_name = balloon
                    device_name = "VirtIO Balloon Driver"
                    device_hwid = '"PCI\\VEN_1AF4&DEV_1002" "PCI\\VEN_1AF4&DEV_1045"'
                    driver_test_names = 'balloon'
                    balloon = balloon0
                    balloon_dev_devid = balloon0
                    balloon_dev_add_bus = yes
                    guest_compare_threshold = 300
                    guest_mem_ratio = 0.025
                - with_vioinput:
                    driver_name = vioinput
                    device_name = VirtIO Input Driver
                    device_hwid = '"PCI\\VEN_1AF4&DEV_1052"'
                    driver_test_names = 'vioinput'
                    inputs = input1
                    input_dev_bus_type_input1 = virtio
                    input_dev_type_input1 = keyboard
                    key_table_file = key_to_keycode_win.json
    variants:
        - installer_version_check:
            only all_drivers
            # note that need to have virtio-win rpm pkg installed on host
            type = virtio_win_installer_version_check
            pkg_name = 'virtio-win'
            rpm_install_chk_cmd = 'rpm -q ${pkg_name}'
            rpm_ver_chk_cmd =  "rpm -qi ${pkg_name} |grep -i version | cut -d ':' -f 2"
            iso_name_chk_cmd = 'rpm -ql ${pkg_name} | grep -E "[0-9].*iso"'
            iso_label_chk_cmd = 'wmic logicaldisk get VolumeName |findstr -i ${pkg_name}'
            installer_chk_cmd = 'powershell -command "(Get-Item -path "%s:\\virtio-win-guest-tools.exe").VersionInfo.ProductVersion"'
        - driver_install:
            only single_driver
        - driver_repair:
            only all_drivers
            type = win_virtio_driver_installer_repair
        - driver_uninstall:
            only all_drivers
            driver_test_names = ''
            type = win_virtio_driver_installer_uninstall
        - driver_update:
            only all_drivers
            type = win_virtio_driver_update_by_installer
            variants:
                - from_old_installer:
                    update_from_previous_installer = yes
                    static_ip = 192.168.0.11
                    static_mask = 255.255.255.0
                    static_gateway = 192.168.0.5
                    static_dns = 192.168.0.1
                    setup_ip_cmd = 'netsh interface ip set address "%s" static ${static_ip} ${static_mask} ${static_gateway}'
                    setup_dns_cmd = 'netsh interface ip add dns "%s" ${static_dns} validate=no'
                - from_old_virtio_win_iso:
