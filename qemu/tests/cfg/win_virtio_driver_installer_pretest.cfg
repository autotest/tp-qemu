- win_virtio_driver_installer_pretest:
    type = win_virtio_driver_installer_pretest
    only Windows
    virtio_win_media_type = iso
    cdroms += " virtio"
    clone_master = yes
    master_images_clone = image1
    remove_image_image1 = yes
    cd_format_fixed = ide
    drive_format_image1 = ide
    q35:
        cd_format_fixed = ahci
        drive_format_image1 = ahci
    vio_driver_chk_cmd = 'driverquery /si | find /i "%s"'
    chk_timeout = 240
    install_script_path = "WIN_UTILS:\install.au3"
    repair_script_path = "WIN_UTILS:\repair.au3"
    uninstall_script_path = "WIN_UTILS:\uninstall.au3"
    run_install_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\install.au3'
    run_repair_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\repair.au3'
    run_uninstall_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\uninstall.au3'
    installer_pkg_check_cmd = 'wmic product get name |findstr "Virtio-win-driver-installer"'
    signed_check_cmd = 'wmic product where name="Virtio-win-driver-installer" | findstr "Red Hat, Inc."'
    monitor_type = qmp
    monitors = qmp1
    mem_stat_check_list = 'stat-free-memory'
    check_mem_diff = 300
    guest_compare_threshold = 300
    guest_mem_ratio = 0.025
    devcon_dirname = "win7_"
    i386:
        devcon_dirname += "x86"
        qemu_ga_pkg = qemu-ga-i386.msi
        msi_name = virtio-win-gt-x86.msi
        uninstall_msi_script = "uninstall_via_msi_x86.au3"
    x86_64:
        devcon_dirname += "amd64"
        qemu_ga_pkg = qemu-ga-x86_64.msi
        msi_name = virtio-win-gt-x64.msi
        uninstall_msi_script = "uninstall_via_msi_x64.au3"
    uninstall_msi_script_path = "WIN_UTILS:\${uninstall_msi_script}"
    devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    del devcon_dirname
    gagent_install_cmd = "start /wait %s /quiet"
    gagent_pkg_info_cmd = 'wmic product where name="Qemu guest agent"'
    gagent_uninstall_cmd = "wmic product where name='Qemu guest agent' call uninstall"
    threshold = 0.025
    nic_model_nic1 = rtl8139
    q35:
        nic_model_nic1 = e1000e
    # install winfsp tool
    i386, i686:
        install_winfsp_path = 'C:\Program Files'
    x86_64:
        install_winfsp_path = 'C:\Program Files (x86)'
    nics += " nic2"
    nic_model_nic2 = virtio
    no_virtio_rng:
        virtio_rngs += " rng0"
        backend_rng0 = rng-builtin
        backend_type = builtin
    images += " stg0 stg1"
    image_name_stg0 = "images/stg0"
    image_name_stg1 = "images/stg1"
    image_size_stg0 = 5G
    image_size_stg1 = 10G
    drive_format_stg0 = virtio
    drive_format_stg1 = scsi-hd
    remove_image_stg0 = yes
    remove_image_stg1 = yes
    force_create_image_stg0 = yes
    force_create_image_stg1 = yes
    serials += " vs"
    serial_type_vs = virtserialport
    balloon = balloon0
    balloon_dev_devid = balloon0
    balloon_dev_add_bus = yes
    install_balloon_service = "%s:\Balloon\blnsvr.exe -i"
    uninstall_balloon_service = "%s:\Balloon\blnsvr.exe -u"
    status_balloon_service = "%s:\Balloon\blnsvr.exe status"
    run_balloon_service = "%s:\Balloon\blnsvr.exe -r"
    stop_balloon_service = "%s:\Balloon\blnsvr.exe -s"
    inputs = input1
    input_dev_bus_type_input1 = virtio
    input_dev_type_input1 = mouse
    vmcoreinfo = yes
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir = virtio_fs_test/
    force_create_fs_source = yes
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    Win10.i386:
        mem = 4096
    mem_devs = mem1
    backend_mem_mem1 = memory-backend-file
    mem-path_mem1 = /dev/shm
    size_mem1 = ${mem}M
    use_mem_mem1 = no
    share_mem = yes
    guest_numa_nodes = shm0
    numa_memdev_shm0 = mem-mem1
    numa_nodeid_shm0 = 0
    fs_binary_extra_options = " -o cache=auto"
    test_drivers = 'viorng viostor vioscsi viofs balloon'
    driver_test_name_viorng = 'rng'
    driver_test_name_viostor = 'iozone'
    driver_test_params_viostor = {'images': 'stg0'}
    driver_test_name_vioscsi = 'iozone'
    driver_test_params_vioscsi = {'images': 'stg1'}
    driver_test_name_viofs = "viofs_basic_io"
    driver_test_name_balloon = "balloon"
    iozone_cmd_opitons = " -azR -r 64k -n 512M -g 1G -M -I -i 0 -i 1 -b iozone.xls -f %s:\testfile"
    read_rng_cmd = "WIN_UTILS:\\random_%PROCESSOR_ARCHITECTURE%.exe"
    driver_test_names = 'balloon viofs_basic_io'
    exe_file_name = "virtiofs.exe"
    exe_find_cmd = 'dir /b /s VIOWIN_LTR\EXE_FILE_NAME'
    inf_find_cmd = 'dir /b /s VIOWIN_LTR\DRIVER_NAME.inf'
    cdrom_virtio = '/home/virtio-win-pretest.iso'
    # add viomem
    x86_64:
        # virtio-mem is not supported on 32-bit systems
        # and viomem is supported from 1.9.40-0
        boot_with_viomem = yes
        driver_test_name_viomem = "viomem"
        slots_mem = 20
        maxmem_mem = 80G
        mem_devs += ' vmem0'
        backend_mem_vmem0 = memory-backend-memfd
        node_memory_vmem0 = "0"
        vm_memdev_model_vmem0 = "virtio-mem"
        size_mem_vmem0 = 8G
        requested-size_memory_vmem0 = 1G
        memdev_memory_vmem0 = "mem-vmem0"
        test_drivers += ' viomem'
        driver_test_name_viomem = "viomem"
    i386:
        # mainly to cover win10.i386 test without viomem
        boot_with_viomem = no
    variants:
        - create_iso:
            create_iso = yes
            driver_folder_name = Virtio-Win
            guest_path = "C:\Program Files\${driver_folder_name}\*"
            host_installer_path = "/home/installer/"
            mkiso_cmd = "mkisofs -o ${cdrom_virtio} -input-charset iso8859-1 -J -R -V "Virtio-Win" ${host_installer_path}"
        - install_uninstall:
            install_uninstall_test = yes
        - update:
            update_test = yes
            static_ip = 192.168.0.11
            static_mask = 255.255.255.0
            static_gateway = 192.168.0.5
            static_dns = 192.168.0.1
            setup_ip_cmd = 'netsh interface ip set address "%s" static ${static_ip} ${static_mask} ${static_gateway}'
            setup_dns_cmd = 'netsh interface ip add dns "%s" ${static_dns} validate=no'
        - repair:
            repair_test = yes
            msi_uninstall_cmd = "msiexec.exe /q /passive /x %s"
