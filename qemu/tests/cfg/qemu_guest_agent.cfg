- qemu_guest_agent: install setup image_copy unattended_install.cdrom single_driver_install.with_vioserial
    only Fedora, RHEL, Windows
    no Fedora.8, Fedora.9, Fedora.10, Fedora.11, Fedora.12, Fedora.13, Fedora.14, Fedora.15
    check_vioser = no
    type = qemu_guest_agent
    gagent_name = "org.qemu.guest_agent.0"
    gagent_install_cmd = "yum install -y qemu-guest-agent"
    gagent_uninstall_cmd = "rpm -e --nodeps qemu-guest-agent"
    gagent_start_cmd = "systemctl start qemu-guest-agent.service"
    gagent_restart_cmd = "systemctl restart qemu-guest-agent.service"
    gagent_stop_cmd = "systemctl stop qemu-guest-agent.service"
    gagent_status_cmd = "systemctl status qemu-guest-agent.service"
    cmd_check_qgaservice = journalctl -e | grep -Ei "syslog is obsolete|ERROR|FAILED|WARNING|FAIL"
    gagent_pkg_check_cmd = "rpm -q qemu-guest-agent"
    setsebool_cmd = "setsebool virt_qemu_ga_read_nonsecurity_files %s"
    getsebool_cmd = "getsebool -a | grep virt_qemu_ga_read_nonsecurity_files |awk '{print$3}'"
    backup_file = /etc/sysconfig/qemu-ga-bk
    black_list_backup = /bin/cp -f /etc/sysconfig/qemu-ga ${backup_file}
    recovery_black_list = mv -f ${backup_file} /etc/sysconfig/qemu-ga
    black_list_change_cmd = "sed -i 's/%s//g' /etc/sysconfig/qemu-ga"
    black_list_spec = BLOCK_RPCS
    Host_RHEL.m7, Host_RHEL.m8, Host_RHEL.m9.u0, Host_RHEL.m9.u1:
        black_list_spec = BLACKLIST_RPC
    black_list_check_cmd = "grep -nr '${black_list_spec}=.*%s' /etc/sysconfig/qemu-ga"
    # /qga_setup_fail.log is saved during guest preinstall phase, if you don't have this file, please skip this parameter.
    cmd_check_qga_installlog = "ls /qga_setup_fail.log"
    # please fill the 'qga_rpm_path' if want to install specified version, form like "qga_rpm_path = ' '"
    qga_rpm_path = "/qemu-guest-agent"
    # Please update your file share web server url before test
    download_root_url = <your_server_url>
    Windows:
        check_vioser = yes
        gagent_src_type = url
        cdroms += " virtio"
        cdrom_virtio = isos/windows/virtio-win.iso
        ga_username = "Administrator"
        i386:
            devcon_dirname += "x86"
            qemu_ga_pkg = qemu-ga-x86.msi
        x86_64:
            devcon_dirname += "amd64"
            qemu_ga_pkg = qemu-ga-x64.msi
        cert_files = ""
        devcon_dirname = "win7_"
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
        cmd_serial_driver_install = '${devcon_path} updateni %s %s'
        gagent_host_path = "/var/tmp/"
        gagent_download_cmd = "wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-qemu-ga/${qemu_ga_pkg} -O ${gagent_host_path}"
        gagent_download_url = "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-qemu-ga/${qemu_ga_pkg} -O ${gagent_host_path}"
        gagent_guest_dir = "C:\qemu-ga"
        src_qgarpm_path= "%s*.rpm"
        installrpm_getmsi = "rpm -Uvh --nodeps --force %s > /dev/null"
        qga_bin = "mingw-qemu-ga-win"
        qga_bin_legacy = "qemu-ga-win"
        get_qgamsi_path = "rpm -ql %s | grep msi"
        gagent_install_cmd = "start /wait %s /quiet"
        gagent_uninstall_cmd = wmic product where name='Qemu guest agent' call uninstall
        gagent_start_cmd = "net start qemu-ga"
        gagent_restart_cmd = "service qemu-ga restart"
        gagent_stop_cmd = "net stop qemu-ga"
        gagent_status_cmd = sc query qemu-ga |findstr "RUNNING"
        gagent_pkg_check_cmd = wmic product get name |findstr "QEMU guest agent"
        gagent_remove_service_cmd = "net stop qemu-ga & del /f C:\qemu-ga\${qemu_ga_pkg} & echo done"
    RHEL.6:
        gagent_start_cmd = "service qemu-ga start"
        gagent_stop_cmd = "service qemu-ga stop"
        gagent_status_cmd = "service qemu-ga status"
        gagent_restart_cmd = "service qemu-ga restart"
    variants:
        - gagent_install:
            gagent_check_type = install
        - gagent_install_uninstall:
            only Windows
            gagent_check_type = install_uninstall
            repeat_times = 50
        - gagent_stop_start:
            no isa_serial
            gagent_check_type = stop_start
            repeat_times = 100
        - gagent_pkg_update:
            only Windows
            type = qemu_guest_agent_update
            gagent_check_type = pkg_update
            monitor_type = qmp
            start_vm = no
            image_snapshot = yes
            cdrom_virtio_downgrade = isos/windows/virtio-win-downgrade.iso
            qga_url = "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-qemu-ga"
            qga_pattern = "qemu-ga-win-\d\.\d\.\d-\d.el\dev"
            variants:
                - @default:
                - without_driver:
                    driver_uninstall = yes
                    driver_name = vioser
                    device_name = "VirtIO Serial Driver"
        - check_sync:
            gagent_check_type = sync
        - check_guest_info:
            gagent_check_type = guest_info
            cmd_qga_build = wmic product where Name="QEMU guest agent" get Version | findstr /v Version
        - check_powerdown:
            gagent_check_type = powerdown
            journal_file = /var/log/journal
            cmd_prepared_and_restart_journald = "mkdir -p ${journal_file} && chgrp systemd-journal ${journal_file} && chmod g+s ${journal_file} && systemctl restart systemd-journald"
            cmd_query_log = "journalctl -e | grep -6 -i 'core-dump'"
        - check_reboot:
            gagent_check_type = reboot
            # This config would be overriden in guest-os.cfg.
            gagent_guest_reboot_pattern = "Restarting system"
            Windows:
                gagent_guest_reboot_pattern = ""
            s390x:
                gagent_guest_reboot_pattern = "System Reboot"
                RHEL.7:
                    gagent_guest_reboot_pattern = "Rebooting"
                RHEL.8:
                    gagent_guest_reboot_pattern = "Started Reboot"
        - check_halt:
            gagent_check_type = halt
            # This config would be overriden in guest-os.cfg.
            gagent_guest_shutdown_pattern = "System halted"
            Windows:
                gagent_guest_shutdown_pattern = ""
            s390x:
                gagent_guest_shutdown_pattern = "System Halt"
                RHEL.7:
                    gagent_guest_shutdown_pattern = "Halting"
                RHEL.8:
                    gagent_guest_shutdown_pattern = "Starting Halt"
        - check_sync_delimited:
            gagent_check_type = sync_delimited
        - check_set_user_password:
            gagent_check_type = set_user_password
            image_snapshot = yes
            ppc64le:
                image_snapshot = no
            variants:
                - no_crypto:
                    new_password = "Abc_123"
                - crypto:
                    no Windows
                    new_password = "123456"
                    crypted = "yes"
        - check_get_vcpus:
            gagent_check_type = get_vcpus
            get_cpu_cmd = "lscpu |awk -F: '/^CPU\(s\)/{print $2}'"
            Windows:
                get_cpu_cmd = 'wmic cpu get NumberOfCores|findstr /r "[0-9]"'
        - check_set_vcpus:
            no Windows
            gagent_check_type = set_vcpus
        - check_set_mem_blocks:
            no Windows
            aarch64:
                no RHEL.7 RHEL.8
            gagent_check_type = set_mem_blocks
        - check_get_time:
            gagent_check_type = get_time
            get_guest_time_cmd = `command -v python python3 | head -1` -c "import time; print(int(time.time()))"
            Windows:
                get_guest_time_cmd = python2.7 -c "import time; print(int(time.time()))"
        - check_memory_leak:
            only Windows
            gagent_check_type = memory_leak
            repeats = 1000000
            test_command = guest-info
            memory_usage_cmd = "tasklist | findstr /I qemu-ga.exe"
        - check_set_time:
            image_snapshot = yes
            ppc64le:
                image_snapshot = no
            gagent_check_type = set_time
            get_guest_time_cmd = `command -v python python3 | head -1` -c "import time; print(int(time.time()))"
            Windows:
                get_guest_time_cmd = python2.7 -c "import time; print(int(time.time()))"
            move_time_cmd = "date --rfc-3339=seconds --utc; date --set='now - 1 week' > /dev/null; date --rfc-3339=seconds --utc"
            variants:
                - @default:
                - invalid_time:
                    invalid_time_test = yes
        - check_time_sync:
            only Windows
            gagent_check_type = time_sync
            image_snapshot = yes
            rtc_drift = none
            get_guest_time_cmd = python2.7 -c "import time; print(int(time.time()))"
            time_service_config = w32tm /config /manualpeerlist:"clock.redhat.com" /syncfromflags:manual /reliable:yes /update
            time_service_status_cmd = sc query w32time |findstr "RUNNING"
            time_service_stop_cmd = net stop w32time
            time_service_start_cmd = net start w32time
            pause_time = 180
        - check_fstrim:
            gagent_check_type = fstrim
            start_vm = no
            disk_size = 1024
            pre_command = "set -e; modprobe -r scsi_debug; modprobe scsi_debug dev_size_mb=${disk_size} lbpws=1; set +e"
            post_command = "modprobe -r scsi_debug"
            mount_point = "/var/test"
            mount_disk_cmd = "mkdir -p ${mount_point} && mount -o discard DISK ${mount_point}"
            format_disk_cmd = "yes|mkfs.ext4 DISK"
            write_disk_cmd = "dd if=/dev/zero of=${mount_point}/file bs=1M count=800 oflag=direct"
            delete_file_cmd = "rm ${mount_point}/file -f; sync"
            Windows:
                # for windows guest, only support win8+
                no Win7,Win2008
                start_vm = yes
                driver_name = vioscsi
                images += " stg"
                image_name_stg = "images/storage"
                image_format_stg = "qcow2"
                image_size_stg = 5G
                blk_extra_params_stg = "discard_granularity=33554432"
                drv_extra_params = "discard=on"
                force_create_image_stg = yes
                remove_image_stg = yes
                delete_file_cmd = "del /f /q"
        - check_get_interfaces:
            gagent_check_type = get_interfaces
            image_snapshot = yes
            ppc64le:
                image_snapshot = no
            cmd_disable_network = wmic path win32_networkadapter where "NetConnectionID='%s'" call disable
            cmd_enable_network = wmic path win32_networkadapter where "NetConnectionID='%s'" call enable
        - check_fsfreeze:
            gagent_fs_test_cmd = "echo foo > %s/foo"
            delete_temp_file = "rm -rf ${mountpoint_def}/foo"
            mountpoint_def = "/home"
            Windows:
                gagent_fs_test_cmd = "echo 'fsfreeze test' > %s\test_file.txt"
                mountpoint_def = "C:"
                delete_temp_file = "del /f /q ${mountpoint_def}\test_file.txt"
                write_cmd_timeout = 8
            variants:
                - @default:
                    gagent_check_type = fsfreeze
                - vss_test:
                    only Windows
                    gagent_check_type = fsfreeze_vss_test
                    gagent_fs_test_cmd = "start /b WIN_UTILS:\fsfreeze-write.py"
                    freeze_timeout = 10
                - fsfreeze_list:
                    gagent_check_type = fsfreeze_list
                    images += " stg0"
                    image_name_stg0 = images/storage0
                    image_size_stg0 = 1G
                    force_create_image_stg0 = yes
        - check_reboot_shutdown_fsfreeze:
            gagent_check_type = reboot_shutdown
        - check_snapshot:
            type = qemu_guest_agent_snapshot
            gagent_check_type = fsfreeze
            gagent_fs_test_cmd = "echo foo > %s/foo"
            delete_temp_file = "rm -rf ${mountpoint_def}/foo"
            mountpoint_def = "/home"
            virt_test_type = qemu
            images += " data"
            force_create_image_data = yes
            start_vm = yes
            storage_pools = default
            storage_type_default = "directory"
            storage_pool = default
            base_tag = "data"
            image_size_data = 100M
            image_name_data = data
            snapshot_tag = sn1
            image_size_sn1 = 100M
            image_name_sn1 = sn1
            image_format_sn1 = qcow2
            device = "drive_data"
            snapshot_file = sn1
            node = "drive_data"
            overlay = "drive_sn1"
            qemu_force_use_drive_expression = no
            Host_RHEL.m7:
                qemu_force_use_drive_expression = yes
            Windows:
                gagent_fs_test_cmd = "echo 'fsfreeze test' > %s\test_file.txt"
                mountpoint_def = "C:"
                delete_temp_file = "del /f /q ${mountpoint_def}\test_file.txt"
        - check_suspend:
            type = qemu_guest_agent_suspend
            services_up_timeout = 30
            extra_params += " -global PIIX4_PM.disable_s3=0"
            extra_params += " -global PIIX4_PM.disable_s4=0"
            # params: s3_support_chk_cmd, s3_bg_program_setup_cmd,
            # s3_bg_program_chk_cmd, s3_bg_program_kill_cmd, s3_log_chk_cmd,
            # s3_start_cmd, s4_support_chk_cmd, s4_bg_program_setup_cmd,
            # s4_bg_program_chk_cmd, s4_bg_program_kill_cmd, s4_log_chk_cmd,
            # s4_start_cmd and services_up_timeout are set in guest-os.cfg
            Windows:
                # Windows guest only works with qxl driver.
                vga = "qxl"
        - check_guest_file:
            file_path = "/tmp/"
            cmd_read = "cat"
            black_list = "guest-file-[a-zA-Z]*"
            cmd_del = "rm -rf"
            Windows:
                file_path = "C:\"
                cmd_read = "type"
                cmd_del = "del /f /q"
            variants:
                - seek:
                    gagent_check_type = file_seek
                - write:
                    gagent_check_type = file_write
                - read:
                    gagent_check_type = file_read
                - with_fsfreeze:
                    gagent_check_type = with_fsfreeze
                - with_selinux:
                    no Windows
                    gagent_check_type = with_selinux
        - check_guest_exec:
            gagent_check_type = guest_exec
            black_list = "guest-exec guest-exec-status"
            guest_cmd = "echo"
            guest_cmd_args = "This is a test."
            guest_cmd_timeout = 60
            Windows:
                guest_cmd = "ping"
                guest_cmd_args = "www.redhat.com -n 2"
        - check_thaw_unfrozen:
            gagent_check_type = thaw_unfrozen
        - check_freeze_frozen:
            gagent_check_type = freeze_frozen
        - check_hotplug_frozen:
            gagent_check_type = hotplug_frozen
            images += " stg0"
            boot_drive_stg0 = no
            image_name_stg0 = images/storage0
            image_size_stg0 = 1G
            force_create_image_stg0 = yes
            disk_write_cmd = "dd if=/dev/zero of=%s/file bs=1M count=4"
            Windows:
                disk_write_cmd = "cd %s:\ && echo test > a.txt"
            ppc64le:
                no virtio_blk
        - check_path_fsfreeze_hook:
            no Windows
            no RHEL.6, RHEL.7
            gagent_check_type = path_fsfreeze_hook
            cmd_get_help_info = "qemu-ga --help | grep 'fsfreeze-hook' | tail -1"
            cmd_get_man_page = "export LC_ALL="en_US.UTF-8"; man qemu-ga |col -b > %s"
            virtio_serial:
                gagent_start_cmd = "qemu-ga -m virtio-serial -p /dev/virtio-ports/org.qemu.guest_agent.0 -F -d"
            isa_serial:
                gagent_start_cmd = "pgrep qemu-ga || qemu-ga -d -m isa-serial -p /dev/ttyS1 -F"
        - check_fsfreeze_hook_script:
            no isa_serial
            no Windows
            gagent_check_type = fsfreeze_hook_script
            image_snapshot = yes
        - check_fsinfo:
            gagent_check_type = fsinfo
            blk_extra_params_image1 = "serial=GAGENT_TEST"
            cmd_get_disk = cat /proc/mounts |grep -v rootfs |awk '$2~/^%s$/{print $1,$3}'
            cmd_get_disk_usage = df -hlk | egrep "%s$" | awk '{print$2*1024,$3*1024}'
            Windows:
                cmd_get_disk = wmic volume where "DeviceID='%s'" get FileSystem,DeviceID |findstr /v /i FileSystem
                cmd_get_disk_usage = wmic volume where "DriveLetter='%s'" get Capacity,FreeSpace |findstr /v /i FreeSpace
        - check_get_disks:
            no Host_RHEL.m6 Host_RHEL.m7
            no Host_RHEL.m8.u0 Host_RHEL.m8.u1 Host_RHEL.m8.u2 Host_RHEL.m8.u3
            gagent_check_type = get_disks
            force_create_image_stg0 = yes
            remove_image_stg0 = yes
            images += " stg0"
            image_name_stg0 = images/storage0
            image_size_stg0 = 1G
            diskinfo_guest_cmd = 'lsblk -Jp -o KNAME,PKNAME,TYPE'
            cmd_get_disk_alias = 'lsblk -o NAME %s |grep -v NAME'
            Windows:
                cmd_get_diskinfo = wmic diskdrive where "DeviceID='%s'" get Name | findstr /v /i Name
        - check_nonexistent_cmd:
            gagent_check_type = nonexistent_cmd
            wrong_cmd = "system_reset"
        - check_umount_frozen:
            gagent_check_type = umount_frozen
            images += " stg0"
            image_name_stg0 = images/storage0
            image_size_stg0 = 1G
            force_create_image_stg0 = yes
        - check_virtio_device:
            only Windows
            gagent_check_type = virtio_device
            check_driver_powershell_cmd = 'powershell -command "Get-WmiObject Win32_PnPSignedDriver -Filter \"%s = '%s'\"'
            check_driver_powershell_cmd += ' | select devicename, driverversion, driverdate, deviceid, friendlyname"'
            # with balloon device
            balloon = balloon0
            balloon_dev_devid = balloon0
            balloon_dev_add_bus = yes
            # with viostor/scsi
            bootindex_image1 = 0
            images += " stg0 stg1"
            image_name_stg0 = "images/stg0"
            image_name_stg1 = "images/stg1"
            image_size_stg0 = 5G
            image_size_stg1 = 5G
            remove_image_stg0 = yes
            remove_image_stg1 = yes
            force_create_image_stg0 = yes
            force_create_image_stg1 = yes
            boot_drive_stg0 = yes
            boot_drive_stg1 = yes
            drive_format_stg0 = virtio
            drive_format_stg1 = scsi-hd
            # with netkvm
            nics += " nic2"
            nic_model_nic2 = virtio
            # with rng
            virtio_rngs = rng0
            backend_rng0 = rng-random
            backend_type = passthrough
            filename_passthrough = /dev/urandom
            # with input
            variants:
                - default:
                - with_input_device:
                    required_qemu = [2.4.0, )
                    no Win2008..sp2
                    inputs = input1 input2 input3
                    input_dev_bus_type_input1 = virtio
                    input_dev_bus_type_input2 = virtio
                    input_dev_bus_type_input3 = virtio
                    input_dev_type_input1 = keyboard
                    input_dev_type_input2 = mouse
                    input_dev_type_input3 = tablet
        - check_os_basic_info:
            no RHEL.6, RHEL.7
            gagent_check_type = os_basic_info
            cmd_get_host_name = hostname
            cmd_set_host_name = hostnamectl set-hostname newhostname && cat /etc/hostname
            cmd_get_timezone_name = date +%Z
            cmd_get_timezone_offset = date +%:z
            cmd_get_users = who
            cmd_get_users_name = who | awk -F ' ' '{print $1}'
            cmd_get_user = who |grep %s
            time_pattern = "\S+\s+\S+\s+(.*)\s+\("
            cmd_time_trans = date -d "%s" +%%s
            Windows:
                cmd_get_timezone_name = wmic timezone get StandardName |findstr /vi StandardName
                cmd_get_timezone_dlight_name = wmic timezone get DaylightName |findstr /vi DaylightName
                cmd_get_timezone_offset = wmic timezone get Caption |findstr /vi Caption
                cmd_get_users = query user |findstr /v USERNAME
                cmd_get_user = query user |findstr /i %s
                cmd_get_user_domain = wmic useraccount where name='%s' get domain |findstr /vi domain
                # 3/3/2020 9:35 AM
                time_pattern = " (\d+/\d+/\d+ \d+:\d+ [APap][Mm])"
                cmd_time_trans = python2.7 -c "import time; dt='%s'; t=time.mktime(time.strptime(dt, '%%m/%%d/%%Y %%I:%%M %%p')); print(t)"
        - check_os_info:
            no RHEL.6
            gagent_check_type = os_info
            os_id = rhel
            cmd_get_full_name = cat /etc/redhat-release
            cmd_get_kernel_ver = uname -v
            cmd_get_kernel_rel = uname -r
            cmd_get_machine_type = uname -m
            Windows:
                os_id = mswindows
                cmd_get_full_name = wmic os get caption |findstr /vi caption
                cmd_get_kernel_ver = wmic os get version |findstr /vi version
                cmd_get_machine_type = wmic os get osarchitecture |findstr /vi osarchitecture
        - gagent_check_blacklist:
            only Linux
            gagent_check_type = blacklist
            black_list_spec = BLOCK_RPCS
            Host_RHEL.m7, Host_RHEL.m8, Host_RHEL.m9.u0, Host_RHEL.m9.u1:
                black_list_spec = BLACKLIST_RPC
            black_list_change_cmd = "sed -i 's/${black_list_spec}.*/${black_list_spec}=guest-info/g' /etc/sysconfig/qemu-ga"
        - gagent_check_log:
            only isa_serial
            gagent_check_type = log
            black_list = "guest-file-[a-zA-Z]*"
            get_log_cmd = cat /var/log/qemu-ga/qemu-ga.log |grep "read data"
            tmp_file = "/tmp/qga_test"
            Windows:
                get_log_cmd = type c:\qga.log |findstr /c:"read data"
                tmp_file = "C:\qga_test.txt"
        - gagent_query_chardev:
            no isa_serial
            gagent_check_type = query_chardev
        - gagent_check_after_init:
            no Windows
            gagent_check_type = after_init
        - gagent_frozen_io:
            only Windows
            gagent_check_type = frozen_io
            iozone_cmd = "start /b for /l %i in (1,1,1000) do "
            iozone_cmd += "WIN_UTILS:\Iozone\iozone.exe -azR -r 64k -s 1G -M -i 0 -i 1 -b iozone.xls"
            iozone_cmd += " -f C:\testfile > C:\frozen_io_log.txt"
        - gagent_vss_status:
            only Windows
            gagent_check_type = vss_status
        - gagent_with_migrate:
            only virtio_serial
            gagent_check_type = with_migrate
            mig_speed = 512M
        - gagent_user_logoff:
            only Windows
            gagent_check_type = user_logoff
        - gagent_qgastatus_after_remove_qga:
            gagent_check_type = qgastatus_after_remove_qga
        - gagent_resource_leak:
            only Windows
            repeat_times = 10000
            qga_mem_threshold = 3000
            qga_handle_threshold = 300
            check_timeout = 500
            gagent_check_type = resource_leak
            cmd_get_qga_resource = powershell "Get-Process -ProcessName qemu-ga | Format-Table -Property Handles, PM, ProcessName | findstr qemu-ga"
            # with balloon device
            balloon = balloon0
            balloon_dev_devid = balloon0
            balloon_dev_add_bus = yes
            # with viostor/scsi
            bootindex_image1 = 0
            images += " stg0 stg1"
            image_name_stg0 = "images/stg0"
            image_name_stg1 = "images/stg1"
            image_size_stg0 = 5G
            image_size_stg1 = 5G
            remove_image_stg0 = yes
            remove_image_stg1 = yes
            force_create_image_stg0 = yes
            force_create_image_stg1 = yes
            drive_format_stg0 = virtio
            drive_format_stg1 = ahci
            cd_format_fixed = ahci
            virtio_win_media_type = iso
            cdroms = " virtio"
            # with netkvm
            nics += " nic2"
            nic_model_nic2 = virtio
            # with rng
            virtio_rngs = rng0
            backend_rng0 = rng-random
            backend_type = passthrough
            filename_passthrough = /dev/urandom
            # with input
            required_qemu = [2.4.0, )
            no Win2008..sp2
            inputs = input1 input2 input3
            input_dev_bus_type_input1 = virtio
            input_dev_bus_type_input2 = virtio
            input_dev_bus_type_input3 = virtio
            input_dev_type_input1 = keyboard
            input_dev_type_input2 = mouse
            input_dev_type_input3 = tablet
        - gagent_ssh_public_key_injection:
            only Linux
            no  RHEL.7 RHEL.8 RHEL.9.0 RHEL.9.1
            gagent_check_type = ssh_public_key_injection
            set_sebool = "setsebool virt_qemu_ga_read_nonsecurity_files on ; setsebool virt_qemu_ga_manage_ssh on"
            cmd_clean_keys = rm -rf ~/.ssh/*
            ssh_keygen_cmd =  "ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa"
            cmd_get_hostkey = "cat ~/.ssh/id_rsa.pub"
            variants:
                - root:
                    guest_user = "root"
                    guest_homepath = /${guest_user}
                    test_login_guest = ssh ${guest_user}@%s -o stricthostkeychecking=no ls ${guest_homepath}
                    output_check_str = 'anaconda-ks.cfg'
                - non_root_user:
                    guest_user = "fedora"
                    guest_user_passwd = "redhat"
                    guest_homepath = "/home/${guest_user}"
                    cmd_add_user_set_passwd = useradd ${guest_user} && echo ${guest_user_passwd} | passwd --stdin ${guest_user}
                    cmd_remove_user = userdel -rf ${guest_user}
                    test_login_guest = ssh ${guest_user}@%s -o stricthostkeychecking=no ls '/home'
                    output_check_str = '${guest_user}'
            add_line_at_end = "echo >> ${guest_homepath}/.ssh/authorized_keys"
            cmd_get_guestkey = "cat ${guest_homepath}/.ssh/authorized_keys"
            cmd_del_key_file = "rm -rf ${guest_homepath}/.ssh/authorized_keys"
        - check_get_cpustats:
            only Linux
            no  RHEL.7 RHEL.8 RHEL.9.1 RHEL.9.0
            gagent_check_type = get_cpustats
            cpustats_info_list = user,nice,system,idle,iowait,irq,softirq,steal,guest,guestnice
            cpu_num_guest = cat /proc/stat | grep "cpu" -c
        - gagent_run_qga_as_program:
            only Windows
            gagent_check_type = run_qga_as_program
            run_gagent_program_cmd = 'cd "C:\Program Files\Qemu-ga\"&'
            run_gagent_program_cmd += 'start /b qemu-ga.exe'
            kill_qga_program_cmd = taskkill /im qemu-ga.exe /t /f
        - check_get_diskstats:
            only Linux
            no  RHEL.7 RHEL.8 RHEL.9.0 RHEL.9.1
            gagent_check_type = get_diskstats
            count_num_arg = head -n 1 /proc/diskstats | awk '{print NF; exit}'
            disk_num_guest = cat /proc/diskstats |wc -l
            cmd_ds_major = cat /proc/diskstats | grep -m 1 %s | awk '{print $1}'
            cmd_ds_minor = cat /proc/diskstats | grep -m 1 %s | awk '{print $2}'
            diskstats_info_list = name,read-sectors,read-ios,read-merges,write-sectors,write-ios,write-merges,discard-sectors,discard-ios,discard-merges,flush-ios,read-ticks,write-ticks,discard-ticks,flush-ticks,ios-pgr,total-ticks,weight-ticks,major,minor
        - gagent_driver_update_via_installer_tool:
            only Windows
            no isa_serial
            gagent_check_type = driver_update_via_installer_tool
            virtio_win_media_type = iso
            cdroms += " virtio"
            clone_master = yes
            master_images_clone = image1
            remove_image_image1 = yes
            cd_format_fixed = ahci
            drive_format_image1 = ahci
            install_script_path = "WIN_UTILS:\install.au3"
            repair_script_path = "WIN_UTILS:\repaire.au3"
            uninstall_script_path = "WIN_UTILS:\uninstall.au3"
            run_install_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\install.au3'
            run_repair_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\repaire.au3'
            run_uninstall_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\uninstall.au3'
            installer_pkg_check_cmd = 'wmic product get name |findstr "Virtio-win-driver-installer"'
            signed_check_cmd = 'wmic product where name="Virtio-win-driver-installer" | findstr "Red Hat, Inc."'
            gagent_uninstall_cmd = "wmic product where name='Qemu guest agent' call uninstall"
            devcon_dirname = "win7_"
            i386:
                devcon_dirname += "x86"
                qemu_ga_pkg = qemu-ga-x86.msi
            x86_64:
                devcon_dirname += "amd64"
                qemu_ga_pkg = qemu-ga-x64.msi
            devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
        - gagent_debugview_VSS_DLL:
            only Windows
            no isa_serial
            gagent_check_type = debugview_VSS_DLL
            virtio_win_media_type = iso
            cdroms += " virtio"
            clone_master = yes
            master_images_clone = image1
            remove_image_image1 = yes
            cmd_run_debugview = 'start WIN_UTILS:\Debugviewconsole.exe -d C:\deb.dbglog'
            cmd_check_string_VSS = 'type C:\debug.dbglog | findstr /i "QEMU Guest Agent VSS Provider\[[0-9]*\]"'
    variants:
        - virtio_serial:
            gagent_serial_type = virtio
            virtio_win_media_type = iso
            driver_name_serial = vioser
            device_hwid_serial = '"PCI\VEN_1AF4&DEV_1003" "PCI\VEN_1AF4&DEV_1043"'
            cmd_check_serial = 'driverquery /V |findstr /i "virtioserial"'
            cert_files = 'trustedpublisher=WIN_UTILS:\redhat.cer'
            serials += " org.qemu.guest_agent.0"
            serial_type_org.qemu.guest_agent.0 = "virtserialport"
        - isa_serial:
            # isa-serial is only supported on x86
            only i386, x86_64
            gagent_serial_type = isa
            check_vioser = no
            serials += " org.qemu.guest_agent.0"
            gagent_start_cmd = "pgrep qemu-ga || qemu-ga -d -m isa-serial -p /dev/ttyS1 -l /var/log/qemu-ga/qemu-ga.log -v"
            gagent_status_cmd = "pgrep qemu-ga"
            gagent_restart_cmd = "pgrep qemu-ga |xargs kill -s 9 &&  ${gagent_start_cmd}"
            Windows:
                gagent_start_cmd = "cd C:\Program Files\Qemu-ga & start /b qemu-ga.exe -m isa-serial -p COM2 -l c:\qga.log -v > nul"
                gagent_status_cmd = "tasklist |findstr /i /r qemu-ga.exe.*Console"
                gagent_restart_cmd = "taskkill /f /t /im qemu-ga.exe & ${gagent_start_cmd}"
