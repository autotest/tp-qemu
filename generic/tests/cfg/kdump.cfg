- kdump: install setup image_copy unattended_install.cdrom
    virt_test_type = qemu libvirt
    no Windows
    no RHEL.3, RHEL.4
    type = kdump
    # time waited for the completion of crash dump
    crash_timeout = 1200
    # command to add the crashkernel=X@Y to kernel cmd line
    # kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args=crashkernel=128M@64M"
    # command to enable kdump service
    # kdump_enable_cmd = chkconfig kdump on && service kdump start
    # command to probe the crash kernel
    # crash_kernel_prob_cmd = "grep -q 1 /sys/kernel/kexec_crash_loaded"
    # crash_cmd = "echo c > /proc/sysrq-trigger"
    # If you want configure multiline, split lines with ";", like:
    # kdump_config = configure line1; config line2
    RHEL.5:
        kdump_config = core_collector makedumpfile -c -d 31
    RHEL.6:
        kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args=crashkernel=128M@16M"
        kdump_enable_cmd = "chkconfig kdump on && service kdump restart"
        kdump_propagate_cmd = "service kdump propagate"
        kdump_restart_cmd = "service kdump restart"
    RHEL.7:
        kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args=crashkernel=auto"
        kdump_enable_cmd = "chkconfig kdump on && systemctl restart kdump.service"
        kdump_propagate_cmd = "kdumpctl propagate"
        kdump_restart_cmd = "systemctl restart kdump.service"

    variants:
        - @default:
        - nmi:
            kernel_param_cmd = "grubby --update-kernel=`grubby --default-kernel` --args='crashkernel=128M nmi_watchdog=1'"
            crash_cmd = nmi

    variants:
        - @basic:
            kdump_method = basic
            vmcore_path = "/var/crash"
            vmcore_chk_cmd = "ls -R %s | grep vmcore"
            vmcore_rm_cmd = "/bin/rm -rf %s/*"
        - with_stress:
            only one_vm
            type = kdump_with_stress
            variants:
                - netperf_stress:
                    stress_type = netperf
                    # Run netperf server in host, the netperf client in guest
                    wait_bg_time = 60
                    run_bgstress = netperf_stress
                    hostpassword = redhat
                    netperf_client = ${vms}
                    netperf_server = localhost
                    netperf_link = netperf-2.6.0.tar.bz2
                    server_path = /var/tmp/
                    client_path = /var/tmp/
                    netperf_test_duration = 360
                    netperf_para_sessions = 2
                    test_protocols = TCP_STREAM
                    kdump_check_cmd = "ps -C netperf"
                    RHEL.4:
                        netperf_link = netperf-2.4.5.tar.bz2
                - io_stress:
                    stress_type = io
                    download_link = http://people.seas.harvard.edu/~apw/stress/stress-1.0.4.tar.gz
                    pkg_md5sum = 7b0859a66fc14eddb349f2fd19cf023e
                    tmp_dir = "/var/tmp"
                    install_cmd = "tar -xzvf ${tmp_dir}/stress-1.0.4.tar.gz -C ./ && cd stress-1.0.4 && ./configure --prefix=/usr && make && make install"
                    app_check_cmd = "stress --help"
                    start_cmd = "stress --cpu 4 --io 4 --vm 2 --vm-bytes 256M --quiet &"
                    kdump_check_cmd = "pidof -s stress"
        - with_ssh:
            # Note: This is a existed bug 737786#c13 for RHEl6
            no RHEL.5
            only one_vm
            kdump_method = ssh
            kdump_config = ssh root@%s;sshkey /root/.ssh/kdump_id_rsa;path %s
            kdump_cfg_path = "/etc/kdump.conf"
            vmcore_path = "/var/crash/guest"
            vmcore_chk_cmd = "ls -R %s | grep vmcore"
            vmcore_rm_cmd = "/bin/rm -rf %s"
            host_pwd = redhat
            guest_pwd = redhat

    variants:
        - one_vm:
        - multi_vms:
              vms += " vm2"
              image_snapshot = yes
