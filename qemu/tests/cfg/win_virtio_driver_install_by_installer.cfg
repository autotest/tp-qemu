- win_virtio_driver_install_by_installer:
    type = win_virtio_driver_install_by_installer
    only Windows
    virtio_win_media_type = iso
    cdroms += " virtio"
    clone_master = yes
    master_images_clone = image1
    remove_image_image1 = yes
    cd_format_fixed = ide
    drive_format_image1 = ide
    q35:
        cd_format_fixed = ahci
        drive_format_image1 = ahci
    vio_driver_chk_cmd = 'driverquery /si | find /i "%s"'
    chk_timeout = 240
    install_script_path = "WIN_UTILS:\install.au3"
    repair_script_path = "WIN_UTILS:\repaire.au3"
    uninstall_script_path = "WIN_UTILS:\uninstall.au3"
    run_install_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\install.au3'
    run_repair_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\repaire.au3'
    run_uninstall_cmd = 'WIN_UTILS:\AutoIt3_%PROCESSOR_ARCHITECTURE%.exe C:\uninstall.au3'
    installer_pkg_check_cmd = 'wmic product get name |findstr "Virtio-win-driver-installer"'
    signed_check_cmd = 'wmic product where name="Virtio-win-driver-installer" | findstr "Red Hat, Inc."'
    devcon_dirname = "win7_"
    i386:
        devcon_dirname += "x86"
        qemu_ga_pkg = qemu-ga-i386.msi
    x86_64:
        devcon_dirname += "amd64"
        qemu_ga_pkg = qemu-ga-x86_64.msi
    devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    del devcon_dirname
    gagent_install_cmd = "start /wait %s /quiet"
    gagent_pkg_info_cmd = 'wmic product where name="Qemu guest agent"'
    gagent_uninstall_cmd = "wmic product where name='Qemu guest agent' call uninstall"
    no_virtio_rng:
        virtio_rngs += " rng0"
        backend_rng0 = rng-builtin
        backend_type = builtin
    Win10, Win2016, Win2019:
        check_qemufwcfg = yes
    Win8, Win2012, Win2012..r2:
        need_reboot = yes
    variants:
        - @all_drivers:
            nics += " nic2"
            nic_model_nic1 = rtl8139
            q35:
                nic_model_nic1 = e1000e
            nic_model_nic2 = virtio
            images += " stg0 stg1"
            image_name_stg0 = "images/stg0"
            image_name_stg1 = "images/stg1"
            image_size_stg0 = 5G
            image_size_stg1 = 10G
            drive_format_stg0 = virtio
            drive_format_stg1 = scsi-hd
            remove_image_stg0 = yes
            remove_image_stg1 = yes
            force_create_image_stg0 = yes
            force_create_image_stg1 = yes
            serials += " vs"
            serial_type_vs = virtserialport
            balloon = balloon0
            balloon_dev_devid = balloon0
            balloon_dev_add_bus = yes
            inputs = input1
            input_dev_bus_type_input1 = virtio
            input_dev_type_input1 = mouse
            filesystems = fs
            fs_driver = virtio-fs
            fs_source_type = mount
            fs_source_dir = virtio_fs_test/
            force_create_fs_source = yes
            remove_fs_source = yes
            fs_target = 'myfs'
            fs_driver_props = {"queue-size": 1024}
            mem = 4096
            mem_devs = mem1
            backend_mem_mem1 = memory-backend-file
            mem-path_mem1 = /dev/shm
            size_mem1 = 4G
            use_mem_mem1 = no
            share_mem = yes
            guest_numa_nodes = shm0
            numa_memdev_shm0 = mem-mem1
            numa_nodeid_shm0 = 0
            fs_binary_extra_options = " -o cache=auto"
            driver_test_names = 'rng iozone'
            driver_test_params = {'images': 'stg0 stg1'}
            iozone_cmd_opitons = " -azR -r 64k -n 512M -g 1G -M -I -i 0 -i 1 -b iozone.xls -f %s:\testfile"
        - single_driver:
            variants:
                - with_viorng:
                    read_rng_cmd = "WIN_UTILS:\\random_%PROCESSOR_ARCHITECTURE%.exe"
                    driver_test_names = 'rng'
                - @with_storage:
                   images += " stg0"
                   image_name_stg0 = "images/stg0"
                   image_size_stg0 = 5G
                   remove_image_stg0 = yes
                   force_create_image_stg0 = yes
                   driver_test_names = 'iozone'
                   driver_test_params = {'images': 'stg0'}
                   iozone_cmd_opitons = " -azR -r 64k -n 512M -g 1G -M -I -i 0 -i 1 -b iozone.xls -f %s:\testfile"
                   variants:
                        - with_viostor:
                            drive_format_stg0 = virtio
                        - with_vioscsi:
                            drive_format_stg0 = scsi-hd
    variants:
        - installer_version_check:
            # note that need to have virtio-win rpm pkg installed on host
            type = virtio_win_installer_version_check
            pkg_name = 'virtio-win'
            rpm_install_chk_cmd = 'rpm -q ${pkg_name}'
            rpm_ver_chk_cmd =  "rpm -qi ${pkg_name} |grep -i version | cut -d ':' -f 2"
            iso_name_chk_cmd = 'rpm -ql ${pkg_name} | grep -E "[0-9].*iso"'
            iso_label_chk_cmd = 'wmic logicaldisk get VolumeName |findstr -i ${pkg_name}'
            installer_chk_cmd = 'powershell -command "(Get-Item -path "%s:\\virtio-win-guest-tools.exe").VersionInfo.ProductVersion"'
        - driver_install:
            only single_driver
        - driver_repair:
            only all_drivers
            type = win_virtio_driver_installer_repair
        - driver_uninstall:
            only all_drivers
            driver_test_names = ''
            type = win_virtio_driver_installer_uninstall
        - driver_update:
            only all_drivers
            type = win_virtio_driver_update_by_installer
            variants:
                - from_old_installer:
                    update_from_previous_installer = yes
                - from_old_virtio_win_iso:
