- virtio_fs_share_data_hugepage:
    no RHEL.6 RHEL.7 RHEL.8.0 RHEL.8.1
    no Win2008 Win7
    no Host_RHEL.m6 Host_RHEL.m7 Host_RHEL.m8.u0 Host_RHEL.m8.u1
    type = virtio_fs_share_data
    virt_test_type = qemu
    required_qemu = [4.2.0,)
    s390, s390x:
        required_qemu = [5.2.0,)
        vm_mem_share = yes
        pre_command_noncritical = yes
        pre_command = "echo 3 > /proc/sys/vm/drop_caches"
        setup_hugepages = yes
        kvm_module_parameters = 'hpage=1'
        expected_hugepage_size = 1024
    kill_vm = yes
    start_vm = no
    Win10.i386:
        mem = 4096
    filesystems = fs
    fs_driver = virtio-fs
    fs_source_type = mount
    fs_source_dir = virtio_fs_test/
    force_create_fs_source = yes
    remove_fs_source = yes
    fs_target = 'myfs'
    fs_driver_props = {"queue-size": 1024}
    # memory backend setting
    setup_hugepages = yes
    pre_command_noncritical = yes
    pre_command = 'sync && echo 3 > /proc/sys/vm/drop_caches && echo 1 > /proc/sys/vm/compact_memory'
    vm_mem_share = yes
    io_timeout = 600
    test_file = 'test_file'
    fs_dest = '/mnt/${fs_target}'
    driver_name = viofs
    fs_binary_extra_options = ''
    Windows:
        # install winfsp tool
        i386, i686:
            install_winfsp_path = 'C:\Program Files'
            devcon_dirname = 'x86'
        x86_64:
            install_winfsp_path = 'C:\Program Files (x86)'
            devcon_dirname = 'amd64'
        install_winfsp_cmd = 'msiexec /i WIN_UTILS:\winfsp.msi /qn'
        check_installed_cmd = 'dir "%s" |findstr /I winfsp'
        viofs_log_file = C:\viofs_log.txt
        viofs_svc_name = VirtioFsSvc
        viofs_exe_path = C:\virtiofs.exe
        viofs_exe_copy_cmd = xcopy %s C:\ /Y
        viofs_sc_create_cmd = 'sc create ${viofs_svc_name} binpath=${viofs_exe_path} start=auto'
        viofs_sc_create_cmd += ' depend="WinFsp.Launcher/VirtioFsDrv" DisplayName="Virtio FS Service"'
        viofs_sc_start_cmd = 'sc start ${viofs_svc_name}'
        viofs_sc_query_cmd = 'sc query ${viofs_svc_name}'
        viofs_sc_delete_cmd = 'sc delete ${viofs_svc_name}'
        debug_log_operation = 'enable'
        viofs_debug_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugFlags /d 0xFFFFFFFF /t REG_DWORD'
        viofs_log_enable_cmd = 'reg add HKLM\Software\VirtIO-FS /v DebugLogFile /d ${viofs_log_file} /t REG_SZ'
        viofs_reg_query_cmd = 'reg query HKLM\Software\VirtIO-FS'
        virtio_win_media_type = iso
        cdroms += " virtio"
        devcon_path = "WIN_UTILS:\devcon\${devcon_dirname}\devcon.exe"
    variants:
        - with_cache:
            variants:
                - auto:
                    fs_binary_extra_options += " --cache=auto"
                - always:
                    fs_binary_extra_options += " --cache=always"
                - none:
                    fs_binary_extra_options += " --cache=never"
    variants:
        - basic_test:
            cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=2048 oflag=direct'
            s390x:
                cmd_dd = 'dd if=/dev/urandom of=%s bs=1M count=200 oflag=direct'
            cmd_md5 = 'md5sum %s'
            folder_test = 'yes'
            test_folder = 'test_folder'
            cmd_new_folder = "cd %s && mkdir -p ${test_folder}"
            cmd_copy_file = "cp ${test_file} ${test_folder}"
            cmd_rename_folder = "mv ${test_folder} ${test_folder}_tmp"
            cmd_del_folder = "rm -rf ${test_folder}_tmp"
            cmd_check_folder = "ls -al ${test_folder}_tmp"
            io_timeout = 120
            Windows:
                cmd_dd = 'dd if=/dev/random of=%s bs=1M count=200'
                cmd_md5 = "%s: && md5sum.exe %s"
                cmd_new_folder = "%s && md ${test_folder}"
                cmd_copy_file = "copy ${test_file} ${test_folder}"
                cmd_rename_folder = "rename ${test_folder} ${test_folder}_tmp"
                cmd_del_folder = "rd /q /s ${test_folder}_tmp"
                cmd_check_folder = "dir ${test_folder}_tmp"
    variants:
        - @default:
        - with_numa:
            no s390, s390x
            backend_mem = memory-backend-file
            mem-path = /mnt/kvm_hugepage
            mem_devs = "mem0"
            guest_numa_nodes = "node0"
            numa_memdev_node0 = mem-mem0
            use_mem_mem0 = no
            share_mem = yes
            size_mem0 = ${mem}M
